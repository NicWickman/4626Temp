{"rootDir":"","artifacts":[{"name":"AddressUpgradeable","artifactPath":"out/AddressUpgradeable.sol/AddressUpgradeable.json","sourcePath":"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol","contractId":"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol:AddressUpgradeable","sourceFileId":2,"sourceContent":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n","sourceMap":"202:8503:2:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:8503:2;;;;;;;;;;;;;;;;;","sourceMapDeployed":"202:8503:2:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"Address","artifactPath":"out/Address.sol/Address.json","sourcePath":"lib/openzeppelin-contracts/contracts/utils/Address.sol","contractId":"lib/openzeppelin-contracts/contracts/utils/Address.sol:Address","sourceFileId":7,"sourceContent":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n","sourceMap":"202:9405:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:9405:7;;;;;;;;;;;;;;;;;","sourceMapDeployed":"202:9405:7:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"Math","artifactPath":"out/Math.sol/Math.json","sourcePath":"lib/openzeppelin-contracts/contracts/utils/math/Math.sol","contractId":"lib/openzeppelin-contracts/contracts/utils/math/Math.sol:Math","sourceFileId":9,"sourceContent":"// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n","sourceMap":"210:12912:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;210:12912:9;;;;;;;;;;;;;;;;;","sourceMapDeployed":"210:12912:9:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"PTest","artifactPath":"out/PTest.sol/PTest.json","sourcePath":"lib/pnm-contracts/PTest.sol","contractId":"lib/pnm-contracts/PTest.sol:PTest","sourceFileId":10,"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\nimport \"forge-std/Test.sol\";\nimport \"./ScriptEx.sol\";\n\ncontract PTest is Test, ScriptEx {\n    uint256 private constant AGENT_PRIVATE_KEY =\n        uint256(keccak256(\"pnm.agent\"));\n\n    function getAgent() internal returns (address) {\n        return vm.addr(AGENT_PRIVATE_KEY);\n    }\n\n    function getAgentKey() public pure returns (uint256) {\n        return AGENT_PRIVATE_KEY;\n    }\n}\n","sourceMap":"120:329:10:-:0;;;1572:26:13;;;1594:4;-1:-1:-1;;1572:26:13;;;;;;;;3288:44:17;;;;;;;;;758:28:15;;;;;;;;;;;120:329:10;;;;;;;;;;;;;;;;","sourceMapDeployed":"120:329:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;590:106:11;;;;;;:::i;:::-;;:::i;:::-;;1170:107;;;;;;:::i;:::-;;:::i;:::-;;2161:134:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2930:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;884:105:11;;;;;;:::i;:::-;;:::i;:::-;;2631:141:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2447:178;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2301:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1059:62:11;;;:::i;:::-;;277:47;;206:64;277:47;;;;;-1:-1:-1;;;;;6564:32:40;;;6546:51;;6534:2;6519:18;277:47:11;;;;;;;2778:146:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;396:82:11;;;;;;:::i;:::-;;:::i;:::-;;1866:141:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1819:584:13;;;:::i;:::-;;;6360:14:40;;6353:22;6335:41;;6323:2;6308:18;1819:584:13;;;;;;;353:94:10;220:22;353:94;;6754:25:40;;;6742:2;6727:18;353:94:10;;;;;;;798:81:11;;;;;;:::i;:::-;;:::i;:::-;;2013:142:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;758:28:15;;;;;;;;;;;;6360:14:40;;6353:22;6335:41;;6323:2;6308:18;758:28:15;;;;;;;1572:26:13;;;;;;;;;;;;6360:14:40;;6353:22;6335:41;;6323:2;6308:18;1572:26:13;;;;;;;590:106:11;667:22;;-1:-1:-1;;;667:22:11;;-1:-1:-1;;;;;2332:15:40;;;667:22:11;;;2314:34:40;2384:15;;2364:18;;;2357:43;667:8:11;;;;2249:18:40;;667:22:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;590:106;;:::o;1170:107::-;1246:24;;-1:-1:-1;;;1246:24:11;;-1:-1:-1;;;;;2882:32:40;;1246:24:11;;;2864:51:40;2931:18;;;2924:34;;;1246:7:11;;;;2837:18:40;;1246:24:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1170:107;;:::o;2161:134:20:-;2208:33;2272:16;2253:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2253:35:20;;;;;;;;;;;;;;;;;;;;;;;2161:134;:::o;2930:133::-;2976:33;3040:16;3021:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3021:35:20;;;;;;;;;;;;;;;;;;;;;;;2930:133;:::o;884:105:11:-;955:27;;-1:-1:-1;;;955:27:11;;-1:-1:-1;;;;;2332:15:40;;;955:27:11;;;2314:34:40;2384:15;;2364:18;;;2357:43;955:13:11;;;;2249:18:40;;955:27:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;884:105;;:::o;2631:141:20:-;2679:35;2747:18;2726:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2726:39:20;;;;;;;;;;;;;;;;;;;;;;;2631:141;:::o;2447:178::-;2503:48;2592:26;2563:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2563:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2563:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2447:178;:::o;2301:140::-;2349:34;2416:18;2395:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2301:140;:::o;1059:62:11:-;317:28:14;309:37;;-1:-1:-1;;;;;1100:12:11;;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1059:62::o;2778:146:20:-;2826:40;2899:18;2878:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:39:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:39:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2778:146;:::o;396:82:11:-;457:14;;-1:-1:-1;;;457:14:11;;-1:-1:-1;;;;;2058:32:40;;457:14:11;;;2040:51:40;457:8:11;;;;2013:18:40;;457:14:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;396:82;:::o;1866:141:20:-;1915:34;1982:18;1961:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1866:141;:::o;1819:584:13:-;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:13;;;;;;;1896:14;;1869:528;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;2585:51:40;;;-1:-1:-1;;;2652:18:40;;;2645:34;2196:43:13;;;;;;;;;2558:18:40;;;2196:43:13;;;-1:-1:-1;;1671:64:13;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:13;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;1980:374;;2374:12;-1:-1:-1;1819:584:13;;:::o;798:81:11:-;853:19;;-1:-1:-1;;;853:19:11;;-1:-1:-1;;;;;2058:32:40;;853:19:11;;;2040:51:40;853:13:11;;;;2013:18:40;;853:19:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;798:81;:::o;2013:142:20:-;2062:35;2130:18;2109:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2109:39:20;;;;;;;;;;;;;;;;;;;;;;;2013:142;:::o;14:173:40:-;82:20;;-1:-1:-1;;;;;131:31:40;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:196::-;;304:2;292:9;283:7;279:23;275:32;272:2;;;325:6;317;310:22;272:2;353:29;372:9;353:29;:::i;:::-;343:39;262:126;-1:-1:-1;;;262:126:40:o;393:270::-;;;522:2;510:9;501:7;497:23;493:32;490:2;;;543:6;535;528:22;490:2;571:29;590:9;571:29;:::i;:::-;561:39;;619:38;653:2;642:9;638:18;619:38;:::i;:::-;609:48;;480:183;;;;;:::o;668:264::-;;;797:2;785:9;776:7;772:23;768:32;765:2;;;818:6;810;803:22;765:2;846:29;865:9;846:29;:::i;:::-;836:39;922:2;907:18;;;;894:32;;-1:-1:-1;;;755:177:40:o;937:297::-;;1057:2;1045:9;1036:7;1032:23;1028:32;1025:2;;;1078:6;1070;1063:22;1025:2;1115:9;1109:16;1168:5;1161:13;1154:21;1147:5;1144:32;1134:2;;1195:6;1187;1180:22;1134:2;1223:5;1015:219;-1:-1:-1;;;1015:219:40:o;1239:371::-;-1:-1:-1;;;;;;1424:33:40;;1412:46;;1481:13;;1239:371;;1503:61;1481:13;1553:1;1544:11;;1537:4;1525:17;;1503:61;:::i;:::-;1584:16;;;;1602:1;1580:24;;1402:208;-1:-1:-1;;;1402:208:40:o;1615:274::-;;1782:6;1776:13;1798:53;1844:6;1839:3;1832:4;1824:6;1820:17;1798:53;:::i;:::-;1867:16;;;;;1752:137;-1:-1:-1;;1752:137:40:o;2969:661::-;3140:2;3192:21;;;3262:13;;3165:18;;;3284:22;;;2969:661;;3140:2;3363:15;;;;3337:2;3322:18;;;2969:661;3409:195;3423:6;3420:1;3417:13;3409:195;;;3488:13;;-1:-1:-1;;;;;3484:39:40;3472:52;;3579:15;;;;3544:12;;;;3520:1;3438:9;3409:195;;;-1:-1:-1;3621:3:40;;3120:510;-1:-1:-1;;;;;;3120:510:40:o;3635:1004::-;;3826:2;3866;3855:9;3851:18;3896:2;3885:9;3878:21;3919:6;3954;3948:13;3985:6;3977;3970:22;4023:2;4012:9;4008:18;4001:25;;4085:2;4075:6;4072:1;4068:14;4057:9;4053:30;4049:39;4035:53;;4123:2;4115:6;4111:15;4144:4;4157:453;4171:6;4168:1;4165:13;4157:453;;;4236:22;;;-1:-1:-1;;4232:36:40;4220:49;;4292:13;;4334:9;;4356:24;;;4393:61;4334:9;4428:15;;;4415:11;;;4393:61;:::i;:::-;4520:2;4497:17;-1:-1:-1;;4493:31:40;4481:44;;;;4477:53;;;-1:-1:-1;4588:12:40;;;;4553:15;;;;4193:1;4186:9;4157:453;;;-1:-1:-1;4627:6:40;;3806:833;-1:-1:-1;;;;;;;3806:833:40:o;4644:1546::-;;4875:2;4915;4904:9;4900:18;4945:2;4934:9;4927:21;4968:6;5003;4997:13;5034:6;5026;5019:22;5060:2;5050:12;;5093:2;5082:9;5078:18;5071:25;;5155:2;5145:6;5142:1;5138:14;5127:9;5123:30;5119:39;5193:2;5185:6;5181:15;5214:4;5227:934;5241:6;5238:1;5235:13;5227:934;;;5306:22;;;-1:-1:-1;;5302:36:40;5290:49;;5362:13;;5449:9;;-1:-1:-1;;;;;5445:35:40;5430:51;;5520:11;;5514:18;5552:15;;;5545:27;;;5633:19;;5402:15;;;5665:24;;;5755:21;;;;5800:4;;5723:2;5711:15;;;5817:236;5833:8;5828:3;5825:17;5817:236;;;5914:15;;-1:-1:-1;;;;;;5910:42:40;5896:57;;6022:17;;;;5861:1;5852:11;;;;;5979:14;;;;5817:236;;;-1:-1:-1;6139:12:40;;;;6076:5;-1:-1:-1;;;6104:15:40;;;;5263:1;5256:9;5227:934;;;-1:-1:-1;6178:6:40;;4855:1335;-1:-1:-1;;;;;;;;4855:1335:40:o;6790:258::-;6862:1;6872:113;6886:6;6883:1;6880:13;6872:113;;;6962:11;;;6956:18;6943:11;;;6936:39;6908:2;6901:10;6872:113;;;7003:6;7000:1;6997:13;6994:2;;;7038:1;7029:6;7024:3;7020:16;7013:27;6994:2;;6843:205;;;:::o;7053:380::-;7132:1;7128:12;;;;7175;;;7196:2;;7250:4;7242:6;7238:17;7228:27;;7196:2;7303;7295:6;7292:14;7272:18;7269:38;7266:2;;;7349:10;7344:3;7340:20;7337:1;7330:31;7384:4;7381:1;7374:15;7412:4;7409:1;7402:15;7266:2;;7108:325;;;:::o","constructor":null,"functions":[{"id":"lib/pnm-contracts/PTest.sol:PTest:IS_SCRIPT()(bool)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"IS_SCRIPT():(bool)","shortSignature":"f8ccbf47","name":"IS_SCRIPT","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:IS_TEST()(bool)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"IS_TEST():(bool)","shortSignature":"fa7626d4","name":"IS_TEST","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:asAccountBegin(address,address)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"asAccountBegin(address,address)","shortSignature":"3eb644f6","name":"asAccountBegin","inputs":[{"name":"addr","kind":"Address","internalType":"address"},{"name":"origin","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:asAccountBegin(address)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"asAccountBegin(address)","shortSignature":"d8fdc41d","name":"asAccountBegin","inputs":[{"name":"addr","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:asAccountEnd()","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"asAccountEnd()","shortSignature":"8667f1bb","name":"asAccountEnd","inputs":[],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:asAccountForNextCall(address,address)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"asAccountForNextCall(address,address)","shortSignature":"03c70e04","name":"asAccountForNextCall","inputs":[{"name":"addr","kind":"Address","internalType":"address"},{"name":"origin","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:asAccountForNextCall(address)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"asAccountForNextCall(address)","shortSignature":"9d7f502f","name":"asAccountForNextCall","inputs":[{"name":"addr","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:excludeArtifacts()(string[])","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"excludeArtifacts():(string[])","shortSignature":"b5508aa9","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","kind":{"Array":"String"},"internalType":"string[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:excludeContracts()(address[])","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"excludeContracts():(address[])","shortSignature":"e20c9f71","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:excludeSenders()(address[])","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"excludeSenders():(address[])","shortSignature":"1ed7831c","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:failed()(bool)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"failed():(bool)","shortSignature":"ba414fa6","name":"failed","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:getAgentKey()(uint256)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"getAgentKey():(uint256)","shortSignature":"ce670b30","name":"getAgentKey","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"pure","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:setNativeBalance(address,uint256)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"setNativeBalance(address,uint256)","shortSignature":"1c050e97","name":"setNativeBalance","inputs":[{"name":"account","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:targetArtifactSelectors()((address,bytes4[])[])","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"targetArtifactSelectors():((address,bytes4[])[])","shortSignature":"66d9a9a0","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","kind":{"Array":{"Tuple":["Address",{"Array":{"FixedBytes":4}}]}},"internalType":"struct StdInvariant.FuzzSelector[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:targetArtifacts()(string[])","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"targetArtifacts():(string[])","shortSignature":"85226c81","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","kind":{"Array":"String"},"internalType":"string[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:targetContracts()(address[])","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"targetContracts():(address[])","shortSignature":"3f7286f4","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:targetSelectors()((address,bytes4[])[])","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"targetSelectors():((address,bytes4[])[])","shortSignature":"916a17c6","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","kind":{"Array":{"Tuple":["Address",{"Array":{"FixedBytes":4}}]}},"internalType":"struct StdInvariant.FuzzSelector[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:targetSenders()(address[])","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"targetSenders():(address[])","shortSignature":"3e5e3c23","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/PTest.sol:PTest:vmEx()(address)","contractId":"lib/pnm-contracts/PTest.sol:PTest","signature":"vmEx():(address)","shortSignature":"905a71a9","name":"vmEx","inputs":[],"outputs":[{"name":"","kind":"Address","internalType":"contract VmEx"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[]},{"name":"DSTest","artifactPath":"out/test.sol/DSTest.json","sourcePath":"lib/pnm-contracts/lib/forge-std/lib/ds-test/src/test.sol","contractId":"lib/pnm-contracts/lib/forge-std/lib/ds-test/src/test.sol:DSTest","sourceFileId":13,"sourceContent":"// SPDX-License-Identifier: GPL-3.0-or-later\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.5.0;\n\ncontract DSTest {\n    event log                    (string);\n    event logs                   (bytes);\n\n    event log_address            (address);\n    event log_bytes32            (bytes32);\n    event log_int                (int);\n    event log_uint               (uint);\n    event log_bytes              (bytes);\n    event log_string             (string);\n\n    event log_named_address      (string key, address val);\n    event log_named_bytes32      (string key, bytes32 val);\n    event log_named_decimal_int  (string key, int val, uint decimals);\n    event log_named_decimal_uint (string key, uint val, uint decimals);\n    event log_named_int          (string key, int val);\n    event log_named_uint         (string key, uint val);\n    event log_named_bytes        (string key, bytes val);\n    event log_named_string       (string key, string val);\n\n    bool public IS_TEST = true;\n    bool private _failed;\n\n    address constant HEVM_ADDRESS =\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n    modifier mayRevert() { _; }\n    modifier testopts(string memory) { _; }\n\n    function failed() public returns (bool) {\n        if (_failed) {\n            return _failed;\n        } else {\n            bool globalFailed = false;\n            if (hasHEVMContext()) {\n                (, bytes memory retdata) = HEVM_ADDRESS.call(\n                    abi.encodePacked(\n                        bytes4(keccak256(\"load(address,bytes32)\")),\n                        abi.encode(HEVM_ADDRESS, bytes32(\"failed\"))\n                    )\n                );\n                globalFailed = abi.decode(retdata, (bool));\n            }\n            return globalFailed;\n        }\n    } \n\n    function fail() internal {\n        if (hasHEVMContext()) {\n            (bool status, ) = HEVM_ADDRESS.call(\n                abi.encodePacked(\n                    bytes4(keccak256(\"store(address,bytes32,bytes32)\")),\n                    abi.encode(HEVM_ADDRESS, bytes32(\"failed\"), bytes32(uint256(0x01)))\n                )\n            );\n            status; // Silence compiler warnings\n        }\n        _failed = true;\n    }\n\n    function hasHEVMContext() internal view returns (bool) {\n        uint256 hevmCodeSize = 0;\n        assembly {\n            hevmCodeSize := extcodesize(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D)\n        }\n        return hevmCodeSize > 0;\n    }\n\n    modifier logs_gas() {\n        uint startGas = gasleft();\n        _;\n        uint endGas = gasleft();\n        emit log_named_uint(\"gas\", startGas - endGas);\n    }\n\n    function assertTrue(bool condition) internal {\n        if (!condition) {\n            emit log(\"Error: Assertion Failed\");\n            fail();\n        }\n    }\n\n    function assertTrue(bool condition, string memory err) internal {\n        if (!condition) {\n            emit log_named_string(\"Error\", err);\n            assertTrue(condition);\n        }\n    }\n\n    function assertEq(address a, address b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [address]\");\n            emit log_named_address(\"  Expected\", b);\n            emit log_named_address(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(address a, address b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes32 a, bytes32 b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [bytes32]\");\n            emit log_named_bytes32(\"  Expected\", b);\n            emit log_named_bytes32(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq32(bytes32 a, bytes32 b) internal {\n        assertEq(a, b);\n    }\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\n        assertEq(a, b, err);\n    }\n\n    function assertEq(int a, int b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [int]\");\n            emit log_named_int(\"  Expected\", b);\n            emit log_named_int(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(int a, int b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq(uint a, uint b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [uint]\");\n            emit log_named_uint(\"  Expected\", b);\n            emit log_named_uint(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(uint a, uint b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Expected\", b, decimals);\n            emit log_named_decimal_int(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Expected\", b, decimals);\n            emit log_named_decimal_uint(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGt(uint a, uint b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(uint a, uint b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGt(int a, int b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(int a, int b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGe(uint a, uint b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(uint a, uint b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGe(int a, int b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(int a, int b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLt(uint a, uint b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(uint a, uint b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLt(int a, int b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(int a, int b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLe(uint a, uint b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(uint a, uint b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLe(int a, int b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(int a, int b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log(\"Error: a == b not satisfied [string]\");\n            emit log_named_string(\"  Expected\", b);\n            emit log_named_string(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(string memory a, string memory b, string memory err) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\n        ok = true;\n        if (a.length == b.length) {\n            for (uint i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) {\n                    ok = false;\n                }\n            }\n        } else {\n            ok = false;\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b) internal {\n        if (!checkEq0(a, b)) {\n            emit log(\"Error: a == b not satisfied [bytes]\");\n            emit log_named_bytes(\"  Expected\", b);\n            emit log_named_bytes(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\n        if (!checkEq0(a, b)) {\n            emit log_named_string(\"Error\", err);\n            assertEq0(a, b);\n        }\n    }\n}\n","sourceMap":"715:15435:13:-:0;;;1572:26;;;-1:-1:-1;;1572:26:13;1594:4;1572:26;;;715:15435;;;;;;;;;;;;;;;;","sourceMapDeployed":"715:15435:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1819:584;;;:::i;:::-;;;1582:14:40;;1575:22;1557:41;;1545:2;1530:18;1819:584:13;;;;;;;1572:26;;;;;;;;;;;;1582:14:40;;1575:22;1557:41;;1545:2;1530:18;1572:26:13;;;;;;;1819:584;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:13;;;;;;;1896:14;;1869:528;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;1312:51:40;;;-1:-1:-1;;;1379:18:40;;;1372:34;2196:43:13;;;;;;;;;1285:18:40;;;2196:43:13;;;-1:-1:-1;;1671:64:13;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:13;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;1980:374;;2374:12;-1:-1:-1;1819:584:13;;:::o;14:297:40:-;;134:2;122:9;113:7;109:23;105:32;102:2;;;155:6;147;140:22;102:2;192:9;186:16;245:5;238:13;231:21;224:5;221:32;211:2;;272:6;264;257:22;211:2;300:5;92:219;-1:-1:-1;;;92:219:40:o;316:340::-;;395:5;389:12;419:3;431:128;445:6;442:1;439:13;431:128;;;542:4;527:13;;;523:24;;517:31;504:11;;;497:52;460:12;431:128;;;577:6;574:1;571:13;568:2;;;612:3;603:6;598:3;594:16;587:29;568:2;-1:-1:-1;634:16:40;;;;;365:291;-1:-1:-1;;365:291:40:o;661:278::-;-1:-1:-1;;;;;;846:33:40;;834:46;;661:278;896:37;930:1;921:11;;913:6;896:37;:::i;:::-;889:44;824:115;-1:-1:-1;;;;824:115:40:o;944:189::-;;1098:29;1123:3;1115:6;1098:29;:::i;:::-;1091:36;1081:52;-1:-1:-1;;;1081:52:40:o","constructor":null,"functions":[{"id":"lib/pnm-contracts/lib/forge-std/lib/ds-test/src/test.sol:DSTest:IS_TEST()(bool)","contractId":"lib/pnm-contracts/lib/forge-std/lib/ds-test/src/test.sol:DSTest","signature":"IS_TEST():(bool)","shortSignature":"fa7626d4","name":"IS_TEST","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/lib/ds-test/src/test.sol:DSTest:failed()(bool)","contractId":"lib/pnm-contracts/lib/forge-std/lib/ds-test/src/test.sol:DSTest","signature":"failed():(bool)","shortSignature":"ba414fa6","name":"failed","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[]},{"name":"stdError","artifactPath":"out/StdError.sol/stdError.json","sourcePath":"lib/pnm-contracts/lib/forge-std/src/StdError.sol","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","sourceFileId":19,"sourceContent":"// SPDX-License-Identifier: MIT\n// Panics work for versions >=0.8.0, but we lowered the pragma to make this compatible with Test\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdError {\n    bytes public constant assertionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x01);\n    bytes public constant arithmeticError = abi.encodeWithSignature(\"Panic(uint256)\", 0x11);\n    bytes public constant divisionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x12);\n    bytes public constant enumConversionError = abi.encodeWithSignature(\"Panic(uint256)\", 0x21);\n    bytes public constant encodeStorageError = abi.encodeWithSignature(\"Panic(uint256)\", 0x22);\n    bytes public constant popError = abi.encodeWithSignature(\"Panic(uint256)\", 0x31);\n    bytes public constant indexOOBError = abi.encodeWithSignature(\"Panic(uint256)\", 0x32);\n    bytes public constant memOverflowError = abi.encodeWithSignature(\"Panic(uint256)\", 0x41);\n    bytes public constant zeroVarError = abi.encodeWithSignature(\"Panic(uint256)\", 0x51);\n}\n","sourceMap":"162:850:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;162:850:19;;;;;;;;;;;;;;;;;","sourceMapDeployed":"162:850:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;740:85;;778:47;;820:4;778:47;;;1980:36:40;1953:18;;778:47:19;;;-1:-1:-1;;778:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;778:47:19;-1:-1:-1;;;778:47:19;;;740:85;;;;;;;;;:::i;:::-;;;;;;;;185:86;;224:47;;266:4;224:47;;;1180:36:40;1153:18;;224:47:19;;;-1:-1:-1;;224:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;224:47:19;-1:-1:-1;;;224:47:19;;;185:86;;;;;;;;;:::i;:::-;;;;;;;;461:91;;505:47;;547:4;505:47;;;1380:36:40;1353:18;;505:47:19;;;-1:-1:-1;;505:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;505:47:19;-1:-1:-1;;;505:47:19;;;461:91;;;;;;;;;:::i;:::-;;;;;;;;277:87;;317:47;;359:4;317:47;;;781:36:40;754:18;;317:47:19;;;-1:-1:-1;;317:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;317:47:19;-1:-1:-1;;;317:47:19;;;277:87;;;;;;;;;:::i;:::-;;;;;;;;831:88;;872:47;;914:4;872:47;;;2180:36:40;2153:18;;872:47:19;;;-1:-1:-1;;872:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;872:47:19;-1:-1:-1;;;872:47:19;;;831:88;;;;;;;;;:::i;:::-;;;;;;;;654:80;;687:47;;729:4;687:47;;;1780:36:40;1753:18;;687:47:19;;;-1:-1:-1;;687:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;687:47:19;-1:-1:-1;;;687:47:19;;;654:80;;;;;;;;;:::i;:::-;;;;;;;;925:84;;962:47;;1004:4;962:47;;;2380:36:40;2353:18;;962:47:19;;;-1:-1:-1;;962:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;962:47:19;-1:-1:-1;;;962:47:19;;;925:84;;;;;;;;;:::i;:::-;;;;;;;;558:90;;601:47;;643:4;601:47;;;1580:36:40;1553:18;;601:47:19;;;-1:-1:-1;;601:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;601:47:19;-1:-1:-1;;;601:47:19;;;558:90;;;;;;;;;:::i;:::-;;;;;;;;370:85;;408:47;;450:4;408:47;;;981:36:40;954:18;;408:47:19;;;-1:-1:-1;;408:47:19;;;;;;;;;;;;;;-1:-1:-1;;;;;408:47:19;-1:-1:-1;;;408:47:19;;;370:85;;;;;;;;;:::i;:::-;;;;;;;;14:609:40;;161:2;190;179:9;172:21;222:6;216:13;265:6;260:2;249:9;245:18;238:34;290:4;303:140;317:6;314:1;311:13;303:140;;;412:14;;;408:23;;402:30;378:17;;;397:2;374:26;367:66;332:10;;303:140;;;461:6;458:1;455:13;452:2;;;531:4;526:2;517:6;506:9;502:22;498:31;491:45;452:2;-1:-1:-1;607:2:40;586:15;-1:-1:-1;;582:29:40;567:45;;;;614:2;563:54;;141:482;-1:-1:-1;;;141:482:40:o","constructor":null,"functions":[{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:arithmeticError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"arithmeticError():(bytes)","shortSignature":"8995290f","name":"arithmeticError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:assertionError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"assertionError():(bytes)","shortSignature":"10332977","name":"assertionError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:divisionError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"divisionError():(bytes)","shortSignature":"fa784a44","name":"divisionError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:encodeStorageError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"encodeStorageError():(bytes)","shortSignature":"d160e4de","name":"encodeStorageError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:enumConversionError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"enumConversionError():(bytes)","shortSignature":"1de45560","name":"enumConversionError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:indexOOBError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"indexOOBError():(bytes)","shortSignature":"05ee8612","name":"indexOOBError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:memOverflowError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"memOverflowError():(bytes)","shortSignature":"986c5f68","name":"memOverflowError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:popError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"popError():(bytes)","shortSignature":"b22dc54d","name":"popError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError:zeroVarError()(bytes)","contractId":"lib/pnm-contracts/lib/forge-std/src/StdError.sol:stdError","signature":"zeroVarError():(bytes)","shortSignature":"b67689da","name":"zeroVarError","inputs":[],"outputs":[{"name":"","kind":"Bytes","internalType":"bytes"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[]},{"name":"StdInvariant","artifactPath":"out/StdInvariant.sol/StdInvariant.json","sourcePath":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","sourceFileId":20,"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\ncontract StdInvariant {\n    struct FuzzSelector {\n        address addr;\n        bytes4[] selectors;\n    }\n\n    address[] private _excludedContracts;\n    address[] private _excludedSenders;\n    address[] private _targetedContracts;\n    address[] private _targetedSenders;\n\n    string[] private _excludedArtifacts;\n    string[] private _targetedArtifacts;\n\n    FuzzSelector[] private _targetedArtifactSelectors;\n    FuzzSelector[] private _targetedSelectors;\n\n    // Functions for users:\n    // These are intended to be called in tests.\n\n    function excludeContract(address newExcludedContract_) internal {\n        _excludedContracts.push(newExcludedContract_);\n    }\n\n    function excludeSender(address newExcludedSender_) internal {\n        _excludedSenders.push(newExcludedSender_);\n    }\n\n    function excludeArtifact(string memory newExcludedArtifact_) internal {\n        _excludedArtifacts.push(newExcludedArtifact_);\n    }\n\n    function targetArtifact(string memory newTargetedArtifact_) internal {\n        _targetedArtifacts.push(newTargetedArtifact_);\n    }\n\n    function targetArtifactSelector(FuzzSelector memory newTargetedArtifactSelector_) internal {\n        _targetedArtifactSelectors.push(newTargetedArtifactSelector_);\n    }\n\n    function targetContract(address newTargetedContract_) internal {\n        _targetedContracts.push(newTargetedContract_);\n    }\n\n    function targetSelector(FuzzSelector memory newTargetedSelector_) internal {\n        _targetedSelectors.push(newTargetedSelector_);\n    }\n\n    function targetSender(address newTargetedSender_) internal {\n        _targetedSenders.push(newTargetedSender_);\n    }\n\n    // Functions for forge:\n    // These are called by forge to run invariant tests and don't need to be called in tests.\n\n    function excludeArtifacts() public view returns (string[] memory excludedArtifacts_) {\n        excludedArtifacts_ = _excludedArtifacts;\n    }\n\n    function excludeContracts() public view returns (address[] memory excludedContracts_) {\n        excludedContracts_ = _excludedContracts;\n    }\n\n    function excludeSenders() public view returns (address[] memory excludedSenders_) {\n        excludedSenders_ = _excludedSenders;\n    }\n\n    function targetArtifacts() public view returns (string[] memory targetedArtifacts_) {\n        targetedArtifacts_ = _targetedArtifacts;\n    }\n\n    function targetArtifactSelectors() public view returns (FuzzSelector[] memory targetedArtifactSelectors_) {\n        targetedArtifactSelectors_ = _targetedArtifactSelectors;\n    }\n\n    function targetContracts() public view returns (address[] memory targetedContracts_) {\n        targetedContracts_ = _targetedContracts;\n    }\n\n    function targetSelectors() public view returns (FuzzSelector[] memory targetedSelectors_) {\n        targetedSelectors_ = _targetedSelectors;\n    }\n\n    function targetSenders() public view returns (address[] memory targetedSenders_) {\n        targetedSenders_ = _targetedSenders;\n    }\n}\n","sourceMap":"100:2965:20:-:0;;;;;;;;;;;;;;;;;;;","sourceMapDeployed":"100:2965:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2161:134;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2930:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2631:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2447:178;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2301:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2778:146;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1866:141;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2013:142;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2161:134;2208:33;2272:16;2253:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2253:35:20;;;;;;;;;;;;;;;;;;;;;;;2161:134;:::o;2930:133::-;2976:33;3040:16;3021:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3021:35:20;;;;;;;;;;;;;;;;;;;;;;;2930:133;:::o;2631:141::-;2679:35;2747:18;2726:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2726:39:20;;;;;;;;;;;;;;;;;;;;;;;2631:141;:::o;2447:178::-;2503:48;2592:26;2563:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2563:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2563:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2447:178;:::o;2301:140::-;2349:34;2416:18;2395:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2301:140;:::o;2778:146::-;2826:40;2899:18;2878:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:39:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:39:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2778:146;:::o;1866:141::-;1915:34;1982:18;1961:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1866:141;:::o;2013:142::-;2062:35;2130:18;2109:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2109:39:20;;;;;;;;;;;;;;;;;;;;;;;2013:142;:::o;14:661:40:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;14:661;;185:2;408:15;;;;382:2;367:18;;;14:661;454:195;468:6;465:1;462:13;454:195;;;533:13;;-1:-1:-1;;;;;529:39:40;517:52;;624:15;;;;589:12;;;;565:1;483:9;454:195;;;-1:-1:-1;666:3:40;;165:510;-1:-1:-1;;;;;;165:510:40:o;680:1250::-;;871:2;911;900:9;896:18;941:2;930:9;923:21;964:6;999;993:13;1030:6;1022;1015:22;1068:2;1057:9;1053:18;1046:25;;1130:2;1120:6;1117:1;1113:14;1102:9;1098:30;1094:39;1080:53;;1168:2;1160:6;1156:15;1189:4;1202:699;1216:6;1213:1;1210:13;1202:699;;;1281:22;;;-1:-1:-1;;1277:36:40;1265:49;;1337:13;;1379:9;;1401:24;;;1449:4;1466:157;1482:8;1477:3;1474:17;1466:157;;;1590:12;;;1586:21;;1580:28;1557:16;;;1553:25;;1546:63;1501:12;;1466:157;;;1647:8;1642:3;1639:17;1636:2;;;1726:4;1721:2;1710:8;1702:6;1698:21;1694:30;1687:44;1636:2;-1:-1:-1;1811:2:40;1788:17;-1:-1:-1;;1784:31:40;1772:44;;;;1768:53;;;-1:-1:-1;1879:12:40;;;;1844:15;;;;1238:1;1231:9;1202:699;;;-1:-1:-1;1918:6:40;;851:1079;-1:-1:-1;;;;;;;851:1079:40:o;1935:1546::-;;2166:2;2206;2195:9;2191:18;2236:2;2225:9;2218:21;2259:6;2294;2288:13;2325:6;2317;2310:22;2351:2;2341:12;;2384:2;2373:9;2369:18;2362:25;;2446:2;2436:6;2433:1;2429:14;2418:9;2414:30;2410:39;2484:2;2476:6;2472:15;2505:4;2518:934;2532:6;2529:1;2526:13;2518:934;;;2597:22;;;-1:-1:-1;;2593:36:40;2581:49;;2653:13;;2740:9;;-1:-1:-1;;;;;2736:35:40;2721:51;;2811:11;;2805:18;2843:15;;;2836:27;;;2924:19;;2693:15;;;2956:24;;;3046:21;;;;3091:4;;3014:2;3002:15;;;3108:236;3124:8;3119:3;3116:17;3108:236;;;3205:15;;-1:-1:-1;;;;;;3201:42:40;3187:57;;3313:17;;;;3152:1;3143:11;;;;;3270:14;;;;3108:236;;;-1:-1:-1;3430:12:40;;;;3367:5;-1:-1:-1;;;3395:15:40;;;;2554:1;2547:9;2518:934;;;-1:-1:-1;3469:6:40;;2146:1335;-1:-1:-1;;;;;;;;2146:1335:40:o;3486:380::-;3565:1;3561:12;;;;3608;;;3629:2;;3683:4;3675:6;3671:17;3661:27;;3629:2;3736;3728:6;3725:14;3705:18;3702:38;3699:2;;;3782:10;3777:3;3773:20;3770:1;3763:31;3817:4;3814:1;3807:15;3845:4;3842:1;3835:15;3699:2;;3541:325;;;:::o","constructor":null,"functions":[{"id":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant:excludeArtifacts()(string[])","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","signature":"excludeArtifacts():(string[])","shortSignature":"b5508aa9","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","kind":{"Array":"String"},"internalType":"string[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant:excludeContracts()(address[])","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","signature":"excludeContracts():(address[])","shortSignature":"e20c9f71","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant:excludeSenders()(address[])","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","signature":"excludeSenders():(address[])","shortSignature":"1ed7831c","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant:targetArtifactSelectors()((address,bytes4[])[])","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","signature":"targetArtifactSelectors():((address,bytes4[])[])","shortSignature":"66d9a9a0","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","kind":{"Array":{"Tuple":["Address",{"Array":{"FixedBytes":4}}]}},"internalType":"struct StdInvariant.FuzzSelector[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant:targetArtifacts()(string[])","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","signature":"targetArtifacts():(string[])","shortSignature":"85226c81","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","kind":{"Array":"String"},"internalType":"string[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant:targetContracts()(address[])","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","signature":"targetContracts():(address[])","shortSignature":"3f7286f4","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant:targetSelectors()((address,bytes4[])[])","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","signature":"targetSelectors():((address,bytes4[])[])","shortSignature":"916a17c6","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","kind":{"Array":{"Tuple":["Address",{"Array":{"FixedBytes":4}}]}},"internalType":"struct StdInvariant.FuzzSelector[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant:targetSenders()(address[])","contractId":"lib/pnm-contracts/lib/forge-std/src/StdInvariant.sol:StdInvariant","signature":"targetSenders():(address[])","shortSignature":"3e5e3c23","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[]},{"name":"stdJson","artifactPath":"out/StdJson.sol/stdJson.json","sourcePath":"lib/pnm-contracts/lib/forge-std/src/StdJson.sol","contractId":"lib/pnm-contracts/lib/forge-std/src/StdJson.sol:stdJson","sourceFileId":21,"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\npragma experimental ABIEncoderV2;\n\nimport {VmSafe} from \"./Vm.sol\";\n\n// Helpers for parsing and writing JSON files\n// To parse:\n// ```\n// using stdJson for string;\n// string memory json = vm.readFile(\"some_peth\");\n// json.parseUint(\"<json_path>\");\n// ```\n// To write:\n// ```\n// using stdJson for string;\n// string memory json = \"deploymentArtifact\";\n// Contract contract = new Contract();\n// json.serialize(\"contractAddress\", address(contract));\n// json = json.serialize(\"deploymentTimes\", uint(1));\n// // store the stringified JSON to the 'json' variable we have been using as a key\n// // as we won't need it any longer\n// string memory json2 = \"finalArtifact\";\n// string memory final = json2.serialize(\"depArtifact\", json);\n// final.write(\"<some_path>\");\n// ```\n\nlibrary stdJson {\n    VmSafe private constant vm = VmSafe(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function parseRaw(string memory json, string memory key) internal pure returns (bytes memory) {\n        return vm.parseJson(json, key);\n    }\n\n    function readUint(string memory json, string memory key) internal returns (uint256) {\n        return vm.parseJsonUint(json, key);\n    }\n\n    function readUintArray(string memory json, string memory key) internal returns (uint256[] memory) {\n        return vm.parseJsonUintArray(json, key);\n    }\n\n    function readInt(string memory json, string memory key) internal returns (int256) {\n        return vm.parseJsonInt(json, key);\n    }\n\n    function readIntArray(string memory json, string memory key) internal returns (int256[] memory) {\n        return vm.parseJsonIntArray(json, key);\n    }\n\n    function readBytes32(string memory json, string memory key) internal returns (bytes32) {\n        return vm.parseJsonBytes32(json, key);\n    }\n\n    function readBytes32Array(string memory json, string memory key) internal returns (bytes32[] memory) {\n        return vm.parseJsonBytes32Array(json, key);\n    }\n\n    function readString(string memory json, string memory key) internal returns (string memory) {\n        return vm.parseJsonString(json, key);\n    }\n\n    function readStringArray(string memory json, string memory key) internal returns (string[] memory) {\n        return vm.parseJsonStringArray(json, key);\n    }\n\n    function readAddress(string memory json, string memory key) internal returns (address) {\n        return vm.parseJsonAddress(json, key);\n    }\n\n    function readAddressArray(string memory json, string memory key) internal returns (address[] memory) {\n        return vm.parseJsonAddressArray(json, key);\n    }\n\n    function readBool(string memory json, string memory key) internal returns (bool) {\n        return vm.parseJsonBool(json, key);\n    }\n\n    function readBoolArray(string memory json, string memory key) internal returns (bool[] memory) {\n        return vm.parseJsonBoolArray(json, key);\n    }\n\n    function readBytes(string memory json, string memory key) internal returns (bytes memory) {\n        return vm.parseJsonBytes(json, key);\n    }\n\n    function readBytesArray(string memory json, string memory key) internal returns (bytes[] memory) {\n        return vm.parseJsonBytesArray(json, key);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool value) internal returns (string memory) {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bool[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBool(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256 value) internal returns (string memory) {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, uint256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeUint(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256 value) internal returns (string memory) {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, int256[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeInt(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address value) internal returns (string memory) {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, address[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeAddress(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32 value) internal returns (string memory) {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes32[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes32(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes memory value) internal returns (string memory) {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, bytes[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeBytes(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function serialize(string memory jsonKey, string memory key, string[] memory value)\n        internal\n        returns (string memory)\n    {\n        return vm.serializeString(jsonKey, key, value);\n    }\n\n    function write(string memory jsonKey, string memory path) internal {\n        vm.writeJson(jsonKey, path);\n    }\n\n    function write(string memory jsonKey, string memory path, string memory valueKey) internal {\n        vm.writeJson(jsonKey, path, valueKey);\n    }\n}\n","sourceMap":"830:5374:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;830:5374:21;;;;;;;;;;;;;;;;;","sourceMapDeployed":"830:5374:21:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"stdMath","artifactPath":"out/StdMath.sol/stdMath.json","sourcePath":"lib/pnm-contracts/lib/forge-std/src/StdMath.sol","contractId":"lib/pnm-contracts/lib/forge-std/src/StdMath.sol:stdMath","sourceFileId":22,"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nlibrary stdMath {\n    int256 private constant INT256_MIN = -57896044618658097711785492504343953926634992332820282019728792003956564819968;\n\n    function abs(int256 a) internal pure returns (uint256) {\n        // Required or it will fail when `a = type(int256).min`\n        if (a == INT256_MIN) {\n            return 57896044618658097711785492504343953926634992332820282019728792003956564819968;\n        }\n\n        return uint256(a > 0 ? a : -a);\n    }\n\n    function delta(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n\n    function delta(int256 a, int256 b) internal pure returns (uint256) {\n        // a and b are of the same sign\n        // this works thanks to two's complement, the left-most bit is the sign bit\n        if ((a ^ b) > -1) {\n            return delta(abs(a), abs(b));\n        }\n\n        // a and b are of opposite signs\n        return abs(a) + abs(b);\n    }\n\n    function percentDelta(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n\n        return absDelta * 1e18 / b;\n    }\n\n    function percentDelta(int256 a, int256 b) internal pure returns (uint256) {\n        uint256 absDelta = delta(a, b);\n        uint256 absB = abs(b);\n\n        return absDelta * 1e18 / absB;\n    }\n}\n","sourceMap":"65:1294:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;65:1294:22;;;;;;;;;;;;;;;;;","sourceMapDeployed":"65:1294:22:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"stdStorage","artifactPath":"out/StdStorage.sol/stdStorage.json","sourcePath":"lib/pnm-contracts/lib/forge-std/src/StdStorage.sol","contractId":"lib/pnm-contracts/lib/forge-std/src/StdStorage.sol:stdStorage","sourceFileId":23,"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => uint256))) slots;\n    mapping(address => mapping(bytes4 => mapping(bytes32 => bool))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes32[] memory ins = self._keys;\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\n            return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\n        }\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\n        vm.record();\n        bytes32 fdat;\n        {\n            (, bytes memory rdat) = who.staticcall(cald);\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\n        }\n\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n        if (reads.length == 1) {\n            bytes32 curr = vm.load(who, reads[0]);\n            if (curr == bytes32(0)) {\n                emit WARNING_UninitedSlot(who, uint256(reads[0]));\n            }\n            if (fdat != curr) {\n                require(\n                    false,\n                    \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\n                );\n            }\n            emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[0]));\n            self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[0]);\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\n        } else if (reads.length > 1) {\n            for (uint256 i = 0; i < reads.length; i++) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n                // store\n                vm.store(who, reads[i], bytes32(hex\"1337\"));\n                bool success;\n                bytes memory rdat;\n                {\n                    (success, rdat) = who.staticcall(cald);\n                    fdat = bytesToBytes32(rdat, 32 * field_depth);\n                }\n\n                if (success && fdat == bytes32(hex\"1337\")) {\n                    // we found which of the slots is the actual one\n                    emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));\n                    self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);\n                    self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\n                    vm.store(who, reads[i], prev);\n                    break;\n                }\n                vm.store(who, reads[i], prev);\n            }\n        } else {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))],\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n\n        return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        address t = self._target;\n        uint256 s = find(self);\n        return abi.encode(vm.load(t, bytes32(s)));\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.find(self);\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes32[] memory ins = self._keys;\n\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\n            find(self);\n        }\n        bytes32 slot = bytes32(self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]);\n\n        bytes32 fdat;\n        {\n            (, bytes memory rdat) = who.staticcall(cald);\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\n        }\n        bytes32 curr = vm.load(who, slot);\n\n        if (fdat != curr) {\n            require(\n                false,\n                \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\n            );\n        }\n        vm.store(who, slot, set);\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    // Private function so needs to be copied over\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    // Private function so needs to be copied over\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n}\n","sourceMap":"7339:4527:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;7339:4527:23;;;;;;;;;;;;;;;;;","sourceMapDeployed":"7339:4527:23:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"stdStorageSafe","artifactPath":"out/StdStorage.sol/stdStorageSafe.json","sourcePath":"lib/pnm-contracts/lib/forge-std/src/StdStorage.sol","contractId":"lib/pnm-contracts/lib/forge-std/src/StdStorage.sol:stdStorageSafe","sourceFileId":23,"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2 <0.9.0;\n\nimport {Vm} from \"./Vm.sol\";\n\nstruct StdStorage {\n    mapping(address => mapping(bytes4 => mapping(bytes32 => uint256))) slots;\n    mapping(address => mapping(bytes4 => mapping(bytes32 => bool))) finds;\n    bytes32[] _keys;\n    bytes4 _sig;\n    uint256 _depth;\n    address _target;\n    bytes32 _set;\n}\n\nlibrary stdStorageSafe {\n    event SlotFound(address who, bytes4 fsig, bytes32 keysHash, uint256 slot);\n    event WARNING_UninitedSlot(address who, uint256 slot);\n\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return bytes4(keccak256(bytes(sigStr)));\n    }\n\n    /// @notice find an arbitrary storage slot given a function sig, input data, address of the contract and a value to check against\n    // slot complexity:\n    //  if flat, will be bytes32(uint256(uint));\n    //  if map, will be keccak256(abi.encode(key, uint(slot)));\n    //  if deep map, will be keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))));\n    //  if map struct, will be bytes32(uint256(keccak256(abi.encode(key1, keccak256(abi.encode(key0, uint(slot)))))) + structFieldDepth);\n    function find(StdStorage storage self) internal returns (uint256) {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes32[] memory ins = self._keys;\n\n        // calldata to test against\n        if (self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\n            return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\n        }\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\n        vm.record();\n        bytes32 fdat;\n        {\n            (, bytes memory rdat) = who.staticcall(cald);\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\n        }\n\n        (bytes32[] memory reads,) = vm.accesses(address(who));\n        if (reads.length == 1) {\n            bytes32 curr = vm.load(who, reads[0]);\n            if (curr == bytes32(0)) {\n                emit WARNING_UninitedSlot(who, uint256(reads[0]));\n            }\n            if (fdat != curr) {\n                require(\n                    false,\n                    \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\n                );\n            }\n            emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[0]));\n            self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[0]);\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\n        } else if (reads.length > 1) {\n            for (uint256 i = 0; i < reads.length; i++) {\n                bytes32 prev = vm.load(who, reads[i]);\n                if (prev == bytes32(0)) {\n                    emit WARNING_UninitedSlot(who, uint256(reads[i]));\n                }\n                // store\n                vm.store(who, reads[i], bytes32(hex\"1337\"));\n                bool success;\n                bytes memory rdat;\n                {\n                    (success, rdat) = who.staticcall(cald);\n                    fdat = bytesToBytes32(rdat, 32 * field_depth);\n                }\n\n                if (success && fdat == bytes32(hex\"1337\")) {\n                    // we found which of the slots is the actual one\n                    emit SlotFound(who, fsig, keccak256(abi.encodePacked(ins, field_depth)), uint256(reads[i]));\n                    self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = uint256(reads[i]);\n                    self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))] = true;\n                    vm.store(who, reads[i], prev);\n                    break;\n                }\n                vm.store(who, reads[i], prev);\n            }\n        } else {\n            revert(\"stdStorage find(StdStorage): No storage use detected for target.\");\n        }\n\n        require(\n            self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))],\n            \"stdStorage find(StdStorage): Slot(s) not found.\"\n        );\n\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n\n        return self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))];\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        self._target = _target;\n        return self;\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        self._sig = _sig;\n        return self;\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        self._sig = sigs(_sig);\n        return self;\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(uint256(uint160(who))));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        self._keys.push(bytes32(amt));\n        return self;\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        self._keys.push(key);\n        return self;\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        self._depth = _depth;\n        return self;\n    }\n\n    function read(StdStorage storage self) private returns (bytes memory) {\n        address t = self._target;\n        uint256 s = find(self);\n        return abi.encode(vm.load(t, bytes32(s)));\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return abi.decode(read(self), (bytes32));\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        int256 v = read_int(self);\n        if (v == 0) return false;\n        if (v == 1) return true;\n        revert(\"stdStorage read_bool(StdStorage): Cannot decode. Make sure you are reading a bool.\");\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return abi.decode(read(self), (address));\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return abi.decode(read(self), (uint256));\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return abi.decode(read(self), (int256));\n    }\n\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n}\n\nlibrary stdStorage {\n    Vm private constant vm = Vm(address(uint160(uint256(keccak256(\"hevm cheat code\")))));\n\n    function sigs(string memory sigStr) internal pure returns (bytes4) {\n        return stdStorageSafe.sigs(sigStr);\n    }\n\n    function find(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.find(self);\n    }\n\n    function target(StdStorage storage self, address _target) internal returns (StdStorage storage) {\n        return stdStorageSafe.target(self, _target);\n    }\n\n    function sig(StdStorage storage self, bytes4 _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function sig(StdStorage storage self, string memory _sig) internal returns (StdStorage storage) {\n        return stdStorageSafe.sig(self, _sig);\n    }\n\n    function with_key(StdStorage storage self, address who) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, who);\n    }\n\n    function with_key(StdStorage storage self, uint256 amt) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, amt);\n    }\n\n    function with_key(StdStorage storage self, bytes32 key) internal returns (StdStorage storage) {\n        return stdStorageSafe.with_key(self, key);\n    }\n\n    function depth(StdStorage storage self, uint256 _depth) internal returns (StdStorage storage) {\n        return stdStorageSafe.depth(self, _depth);\n    }\n\n    function checked_write(StdStorage storage self, address who) internal {\n        checked_write(self, bytes32(uint256(uint160(who))));\n    }\n\n    function checked_write(StdStorage storage self, uint256 amt) internal {\n        checked_write(self, bytes32(amt));\n    }\n\n    function checked_write(StdStorage storage self, bool write) internal {\n        bytes32 t;\n        /// @solidity memory-safe-assembly\n        assembly {\n            t := write\n        }\n        checked_write(self, t);\n    }\n\n    function checked_write(StdStorage storage self, bytes32 set) internal {\n        address who = self._target;\n        bytes4 fsig = self._sig;\n        uint256 field_depth = self._depth;\n        bytes32[] memory ins = self._keys;\n\n        bytes memory cald = abi.encodePacked(fsig, flatten(ins));\n        if (!self.finds[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]) {\n            find(self);\n        }\n        bytes32 slot = bytes32(self.slots[who][fsig][keccak256(abi.encodePacked(ins, field_depth))]);\n\n        bytes32 fdat;\n        {\n            (, bytes memory rdat) = who.staticcall(cald);\n            fdat = bytesToBytes32(rdat, 32 * field_depth);\n        }\n        bytes32 curr = vm.load(who, slot);\n\n        if (fdat != curr) {\n            require(\n                false,\n                \"stdStorage find(StdStorage): Packed slot. This would cause dangerous overwriting and currently isn't supported.\"\n            );\n        }\n        vm.store(who, slot, set);\n        delete self._target;\n        delete self._sig;\n        delete self._keys;\n        delete self._depth;\n    }\n\n    function read_bytes32(StdStorage storage self) internal returns (bytes32) {\n        return stdStorageSafe.read_bytes32(self);\n    }\n\n    function read_bool(StdStorage storage self) internal returns (bool) {\n        return stdStorageSafe.read_bool(self);\n    }\n\n    function read_address(StdStorage storage self) internal returns (address) {\n        return stdStorageSafe.read_address(self);\n    }\n\n    function read_uint(StdStorage storage self) internal returns (uint256) {\n        return stdStorageSafe.read_uint(self);\n    }\n\n    function read_int(StdStorage storage self) internal returns (int256) {\n        return stdStorageSafe.read_int(self);\n    }\n\n    // Private function so needs to be copied over\n    function bytesToBytes32(bytes memory b, uint256 offset) private pure returns (bytes32) {\n        bytes32 out;\n\n        uint256 max = b.length > 32 ? 32 : b.length;\n        for (uint256 i = 0; i < max; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    // Private function so needs to be copied over\n    function flatten(bytes32[] memory b) private pure returns (bytes memory) {\n        bytes memory result = new bytes(b.length * 32);\n        for (uint256 i = 0; i < b.length; i++) {\n            bytes32 k = b[i];\n            /// @solidity memory-safe-assembly\n            assembly {\n                mstore(add(result, add(32, mul(32, i))), k)\n            }\n        }\n\n        return result;\n    }\n}\n","sourceMap":"368:6969:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;368:6969:23;;;;;;;;;;;;;;;;;","sourceMapDeployed":"368:6969:23:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"console","artifactPath":"out/console.sol/console.json","sourcePath":"lib/pnm-contracts/lib/forge-std/src/console.sol","contractId":"lib/pnm-contracts/lib/forge-std/src/console.sol:console","sourceFileId":27,"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n    }\n\n    function logUint(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n    }\n\n    function log(uint p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n    }\n\n    function log(uint p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n    }\n\n    function log(uint p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}","sourceMap":"66:66622:27:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;66:66622:27;;;;;;;;;;;;;;;;;","sourceMapDeployed":"66:66622:27:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"console2","artifactPath":"out/console2.sol/console2.json","sourcePath":"lib/pnm-contracts/lib/forge-std/src/console2.sol","contractId":"lib/pnm-contracts/lib/forge-std/src/console2.sol:console2","sourceFileId":28,"sourceContent":"// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\n/// @dev The original console.sol uses `int` and `uint` for computing function selectors, but it should\n/// use `int256` and `uint256`. This modified version fixes that. This version is recommended\n/// over `console.sol` if you don't need compatibility with Hardhat as the logs will show up in\n/// forge stack traces. If you do need compatibility with Hardhat, you must use `console.sol`.\n/// Reference: https://github.com/NomicFoundation/hardhat/issues/2178\nlibrary console2 {\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n    function _sendLogPayload(bytes memory payload) private view {\n        uint256 payloadLength = payload.length;\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            let payloadStart := add(payload, 32)\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n        }\n    }\n\n    function log() internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n\n    function logInt(int256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(int256 p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function log(string memory p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, int256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,int256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal view {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}","sourceMap":"525:68782:28:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;525:68782:28;;;;;;;;;;;;;;;;;","sourceMapDeployed":"525:68782:28:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"TransferHelper","artifactPath":"out/TransferHelper.sol/TransferHelper.json","sourcePath":"lib/solidity-lib/contracts/libraries/TransferHelper.sol","contractId":"lib/solidity-lib/contracts/libraries/TransferHelper.sol:TransferHelper","sourceFileId":30,"sourceContent":"// SPDX-License-Identifier: GPL-3.0-or-later\r\n\r\npragma solidity >=0.6.0;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n","sourceMap":"188:1666:30:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:1666:30;;;;;;;;;;;;;;;;;","sourceMapDeployed":"188:1666:30:-:0;;;;;;;;","constructor":null,"functions":[],"functionalLines":[]},{"name":"BondController","artifactPath":"out/BondController.sol/BondController.json","sourcePath":"lib/tranche/contracts/BondController.sol","contractId":"lib/tranche/contracts/BondController.sol:BondController","sourceFileId":31,"sourceContent":"pragma solidity 0.8.3;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\nimport \"./interfaces/IBondController.sol\";\r\nimport \"./interfaces/ITrancheFactory.sol\";\r\nimport \"./interfaces/ITranche.sol\";\r\nimport \"./interfaces/IRebasingERC20.sol\";\r\n\r\n/**\r\n * @dev Controller for a ButtonTranche bond\r\n *\r\n * Invariants:\r\n *  - `totalDebt` should always equal the sum of all tranche tokens' `totalSupply()`\r\n */\r\ncontract BondController is IBondController, OwnableUpgradeable {\r\n    uint256 private constant TRANCHE_RATIO_GRANULARITY = 1000;\r\n    // One tranche for A-Z\r\n    uint256 private constant MAX_TRANCHE_COUNT = 26;\r\n    // Denominator for basis points. Used to calculate fees\r\n    uint256 private constant BPS = 10_000;\r\n    // Maximum fee in terms of basis points\r\n    uint256 private constant MAX_FEE_BPS = 50;\r\n\r\n    // to avoid precision loss and other weird math from a small total debt\r\n    // we require the debt to be at least MINIMUM_VALID_DEBT if any\r\n    uint256 private constant MINIMUM_VALID_DEBT = 10e9;\r\n\r\n    address public override collateralToken;\r\n    TrancheData[] public override tranches;\r\n    uint256 public override trancheCount;\r\n    mapping(address => bool) public trancheTokenAddresses;\r\n    uint256 public override creationDate;\r\n    uint256 public override maturityDate;\r\n    bool public override isMature;\r\n    uint256 public override totalDebt;\r\n    uint256 public lastScaledCollateralBalance;\r\n\r\n    // Maximum amount of collateral that can be deposited into this bond\r\n    // Used as a guardrail for initial launch.\r\n    // If set to 0, no deposit limit will be enforced\r\n    uint256 public depositLimit;\r\n    // Fee taken on deposit in basis points. Can be set by the contract owner\r\n    uint256 public override feeBps;\r\n\r\n    /**\r\n     * @dev Constructor for Tranche ERC20 token\r\n     * @param _trancheFactory The address of the tranche factory\r\n     * @param _collateralToken The address of the ERC20 collateral token\r\n     * @param _admin The address of the initial admin for this contract\r\n     * @param trancheRatios The tranche ratios for this bond\r\n     * @param _maturityDate The date timestamp in seconds at which this bond matures\r\n     * @param _depositLimit The maximum amount of collateral that can be deposited. 0 if no limit\r\n     */\r\n    function init(\r\n        address _trancheFactory,\r\n        address _collateralToken,\r\n        address _admin,\r\n        uint256[] memory trancheRatios,\r\n        uint256 _maturityDate,\r\n        uint256 _depositLimit\r\n    ) external initializer {\r\n        require(_trancheFactory != address(0), \"BondController: invalid trancheFactory address\");\r\n        require(_collateralToken != address(0), \"BondController: invalid collateralToken address\");\r\n        require(_admin != address(0), \"BondController: invalid admin address\");\r\n        require(trancheRatios.length <= MAX_TRANCHE_COUNT, \"BondController: invalid tranche count\");\r\n        __Ownable_init();\r\n        transferOwnership(_admin);\r\n\r\n        trancheCount = trancheRatios.length;\r\n        collateralToken = _collateralToken;\r\n        string memory collateralSymbol = IERC20Metadata(collateralToken).symbol();\r\n\r\n        uint256 totalRatio;\r\n        for (uint256 i = 0; i < trancheRatios.length; i++) {\r\n            uint256 ratio = trancheRatios[i];\r\n            require(ratio <= TRANCHE_RATIO_GRANULARITY, \"BondController: Invalid tranche ratio\");\r\n            totalRatio += ratio;\r\n\r\n            address trancheTokenAddress = ITrancheFactory(_trancheFactory).createTranche(\r\n                getTrancheName(collateralSymbol, i, trancheRatios.length),\r\n                getTrancheSymbol(collateralSymbol, i, trancheRatios.length),\r\n                _collateralToken\r\n            );\r\n            tranches.push(TrancheData(ITranche(trancheTokenAddress), ratio));\r\n            trancheTokenAddresses[trancheTokenAddress] = true;\r\n        }\r\n\r\n        require(totalRatio == TRANCHE_RATIO_GRANULARITY, \"BondController: Invalid tranche ratios\");\r\n        require(_maturityDate > block.timestamp, \"BondController: Invalid maturity date\");\r\n        creationDate = block.timestamp;\r\n        maturityDate = _maturityDate;\r\n        depositLimit = _depositLimit;\r\n    }\r\n\r\n    /**\r\n     * @dev Skims extraneous collateral that was incorrectly sent to the contract\r\n     */\r\n    modifier onSkim() {\r\n        uint256 scaledCollateralBalance = IRebasingERC20(collateralToken).scaledBalanceOf(address(this));\r\n        // If there is extraneous collateral, transfer to the owner\r\n        if (scaledCollateralBalance > lastScaledCollateralBalance) {\r\n            uint256 _collateralBalance = IERC20(collateralToken).balanceOf(address(this));\r\n            uint256 virtualCollateralBalance = Math.mulDiv(\r\n                lastScaledCollateralBalance,\r\n                _collateralBalance,\r\n                scaledCollateralBalance\r\n            );\r\n            TransferHelper.safeTransfer(collateralToken, owner(), _collateralBalance - virtualCollateralBalance);\r\n        }\r\n        _;\r\n        // Update the lastScaledCollateralBalance after the function call\r\n        lastScaledCollateralBalance = IRebasingERC20(collateralToken).scaledBalanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBondController\r\n     */\r\n    function deposit(uint256 amount) external override onSkim {\r\n        require(amount > 0, \"BondController: invalid amount\");\r\n\r\n        require(!isMature, \"BondController: Already mature\");\r\n\r\n        uint256 _collateralBalance = IERC20(collateralToken).balanceOf(address(this));\r\n        require(depositLimit == 0 || _collateralBalance + amount <= depositLimit, \"BondController: Deposit limit\");\r\n\r\n        TrancheData[] memory _tranches = tranches;\r\n\r\n        uint256 newDebt;\r\n        uint256[] memory trancheValues = new uint256[](trancheCount);\r\n        for (uint256 i = 0; i < _tranches.length; i++) {\r\n            // NOTE: solidity 0.8 checks for over/underflow natively so no need for SafeMath\r\n            uint256 trancheValue = (amount * _tranches[i].ratio) / TRANCHE_RATIO_GRANULARITY;\r\n\r\n            // if there is any collateral, we should scale by the debt:collateral ratio\r\n            // note: if totalDebt == 0 then we're minting for the first time\r\n            // so shouldn't scale even if there is some collateral mistakenly sent in\r\n            if (_collateralBalance > 0 && totalDebt > 0) {\r\n                trancheValue = Math.mulDiv(trancheValue, totalDebt, _collateralBalance);\r\n            }\r\n            newDebt += trancheValue;\r\n            trancheValues[i] = trancheValue;\r\n        }\r\n        totalDebt += newDebt;\r\n\r\n        TransferHelper.safeTransferFrom(collateralToken, _msgSender(), address(this), amount);\r\n        // saving feeBps in memory to minimize sloads\r\n        uint256 _feeBps = feeBps;\r\n        for (uint256 i = 0; i < trancheValues.length; i++) {\r\n            uint256 trancheValue = trancheValues[i];\r\n            // fee tranche tokens are minted and held by the contract\r\n            // upon maturity, they are redeemed and underlying collateral are sent to the owner\r\n            uint256 fee = (trancheValue * _feeBps) / BPS;\r\n            if (fee > 0) {\r\n                _tranches[i].token.mint(address(this), fee);\r\n            }\r\n\r\n            _tranches[i].token.mint(_msgSender(), trancheValue - fee);\r\n        }\r\n        emit Deposit(_msgSender(), amount, _feeBps);\r\n\r\n        _enforceTotalDebt();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBondController\r\n     */\r\n    function mature() external override onSkim {\r\n        require(!isMature, \"BondController: Already mature\");\r\n        require(owner() == _msgSender() || maturityDate < block.timestamp, \"BondController: Invalid call to mature\");\r\n        isMature = true;\r\n\r\n        TrancheData[] memory _tranches = tranches;\r\n        uint256 _collateralBalance = IERC20(collateralToken).balanceOf(address(this));\r\n        // Go through all tranches A-Y (not Z) delivering collateral if possible\r\n        for (uint256 i = 0; i < _tranches.length - 1 && _collateralBalance > 0; i++) {\r\n            ITranche _tranche = _tranches[i].token;\r\n            // pay out the entire tranche token's owed collateral (equal to the supply of tranche tokens)\r\n            // if there is not enough collateral to pay it out, pay as much as we have\r\n            uint256 amount = Math.min(_tranche.totalSupply(), _collateralBalance);\r\n            _collateralBalance -= amount;\r\n\r\n            TransferHelper.safeTransfer(collateralToken, address(_tranche), amount);\r\n\r\n            // redeem fees, sending output tokens to owner\r\n            _tranche.redeem(address(this), owner(), IERC20(_tranche).balanceOf(address(this)));\r\n        }\r\n\r\n        // Transfer any remaining collaeral to the Z tranche\r\n        if (_collateralBalance > 0) {\r\n            ITranche _tranche = _tranches[_tranches.length - 1].token;\r\n            TransferHelper.safeTransfer(collateralToken, address(_tranche), _collateralBalance);\r\n            _tranche.redeem(address(this), owner(), IERC20(_tranche).balanceOf(address(this)));\r\n        }\r\n\r\n        emit Mature(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBondController\r\n     */\r\n    function redeemMature(address tranche, uint256 amount) external override {\r\n        require(isMature, \"BondController: Bond is not mature\");\r\n        require(trancheTokenAddresses[tranche], \"BondController: Invalid tranche address\");\r\n\r\n        ITranche(tranche).redeem(_msgSender(), _msgSender(), amount);\r\n        totalDebt -= amount;\r\n        emit RedeemMature(_msgSender(), tranche, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBondController\r\n     */\r\n    function redeem(uint256[] memory amounts) external override onSkim {\r\n        require(!isMature, \"BondController: Bond is already mature\");\r\n\r\n        TrancheData[] memory _tranches = tranches;\r\n        require(amounts.length == _tranches.length, \"BondController: Invalid redeem amounts\");\r\n        uint256 total;\r\n\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            total += amounts[i];\r\n        }\r\n\r\n        for (uint256 i = 0; i < amounts.length; i++) {\r\n            require(\r\n                (amounts[i] * TRANCHE_RATIO_GRANULARITY) / total == _tranches[i].ratio,\r\n                \"BondController: Invalid redemption ratio\"\r\n            );\r\n            _tranches[i].token.burn(_msgSender(), amounts[i]);\r\n        }\r\n\r\n        uint256 _collateralBalance = IERC20(collateralToken).balanceOf(address(this));\r\n        // return as a proportion of the total debt redeemed\r\n        uint256 returnAmount = Math.mulDiv(total, _collateralBalance, totalDebt);\r\n\r\n        totalDebt -= total;\r\n        TransferHelper.safeTransfer(collateralToken, _msgSender(), returnAmount);\r\n        emit Redeem(_msgSender(), amounts);\r\n\r\n        _enforceTotalDebt();\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IBondController\r\n     */\r\n    function setFee(uint256 newFeeBps) external override onlyOwner {\r\n        require(!isMature, \"BondController: Invalid call to setFee\");\r\n        require(newFeeBps <= MAX_FEE_BPS, \"BondController: New fee too high\");\r\n        feeBps = newFeeBps;\r\n\r\n        emit FeeUpdate(newFeeBps);\r\n    }\r\n\r\n    /**\r\n     * @dev Get the string name for a tranche\r\n     * @param collateralSymbol the symbol of the collateral token\r\n     * @param index the tranche index\r\n     * @param _trancheCount the total number of tranches\r\n     * @return the string name of the tranche\r\n     */\r\n    function getTrancheName(\r\n        string memory collateralSymbol,\r\n        uint256 index,\r\n        uint256 _trancheCount\r\n    ) internal pure returns (string memory) {\r\n        return\r\n            string(abi.encodePacked(\"ButtonTranche \", collateralSymbol, \" \", getTrancheLetter(index, _trancheCount)));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the string symbol for a tranche\r\n     * @param collateralSymbol the symbol of the collateral token\r\n     * @param index the tranche index\r\n     * @param _trancheCount the total number of tranches\r\n     * @return the string symbol of the tranche\r\n     */\r\n    function getTrancheSymbol(\r\n        string memory collateralSymbol,\r\n        uint256 index,\r\n        uint256 _trancheCount\r\n    ) internal pure returns (string memory) {\r\n        return string(abi.encodePacked(\"TRANCHE-\", collateralSymbol, \"-\", getTrancheLetter(index, _trancheCount)));\r\n    }\r\n\r\n    /**\r\n     * @dev Get the string letter for a tranche index\r\n     * @param index the tranche index\r\n     * @param _trancheCount the total number of tranches\r\n     * @return the string letter of the tranche index\r\n     */\r\n    function getTrancheLetter(uint256 index, uint256 _trancheCount) internal pure returns (string memory) {\r\n        bytes memory trancheLetters = bytes(\"ABCDEFGHIJKLMNOPQRSTUVWXY\");\r\n        bytes memory target = new bytes(1);\r\n        if (index == _trancheCount - 1) {\r\n            target[0] = \"Z\";\r\n        } else {\r\n            target[0] = trancheLetters[index];\r\n        }\r\n        return string(target);\r\n    }\r\n\r\n    // @dev Ensuring total debt isn't too small\r\n    function _enforceTotalDebt() internal {\r\n        require(totalDebt >= MINIMUM_VALID_DEBT, \"BondController: Expected minimum valid debt\");\r\n    }\r\n\r\n    /**\r\n     * @dev Get the virtual collateral balance of the bond\r\n     * @return the virtual collateral balance\r\n     */\r\n    function collateralBalance() external view returns (uint256) {\r\n        uint256 scaledCollateralBalance = IRebasingERC20(collateralToken).scaledBalanceOf(address(this));\r\n        uint256 _collateralBalance = IERC20(collateralToken).balanceOf(address(this));\r\n\r\n        return\r\n            (scaledCollateralBalance > lastScaledCollateralBalance)\r\n                ? Math.mulDiv(lastScaledCollateralBalance, _collateralBalance, scaledCollateralBalance)\r\n                : _collateralBalance;\r\n    }\r\n}\r\n","sourceMap":"740:13385:31:-:0;;;;;;;;;;;;;;;;;;;","sourceMapDeployed":"740:13385:31:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1555:36;;;;;;;;;20042:25:40;;;20030:2;20015:18;1555:36:31;;;;;;;1495:53;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8552:14:40;;8545:22;8527:41;;8515:2;8500:18;1495:53:31;;;;;;;2058:30;;;;;;;;;20042:25:40;;;20030:2;20015:18;2058:30:31;;;;;;;1407:38;;;;;;:::i;:::-;;:::i;:::-;;;;-1:-1:-1;;;;;8789:32:40;;;8771:51;;8853:2;8838:18;;8831:34;;;;8744:18;1407:38:31;;;;;;;2624:1910;;;;;;:::i;:::-;;:::i;:::-;;9489:402;;;;;;:::i;:::-;;:::i;:::-;;1452:36;;;;;;;;;20042:25:40;;;20030:2;20015:18;1452:36:31;;;;;;;11184:289;;;;;;:::i;:::-;;:::i;:::-;;2136:103:0;;;:::i;:::-;;7804:1623:31;;;:::i;:::-;;1488:87:0;1561:6;;1488:87;;;-1:-1:-1;;;;;1561:6:0;;;6579:51:40;;1488:87:0;;;;;6567:2:40;1488:87:0;;;1717:42:31;;;;;;;;;20042:25:40;;;20030:2;20015:18;1717:42:31;;;;;;;1641:29;;;;;;;;;;;;8552:14:40;;8545:22;8527:41;;8515:2;8500:18;1641:29:31;;;;;;;1361:39;;;;;-1:-1:-1;;;;;1361:39:31;;;;;;-1:-1:-1;;;;;6597:32:40;;;6579:51;;6567:2;6552:18;1361:39:31;;;;;;;5586:2156;;;;;;:::i;:::-;;:::i;:::-;;13627:495;;;:::i;:::-;;;20042:25:40;;;20030:2;20015:18;13627:495:31;;;;;;;1598:36;;;;;;;;;20042:25:40;;;20030:2;20015:18;1598:36:31;;;;;;;1945:27;;;;;;;;;20042:25:40;;;20030:2;20015:18;1945:27:31;;;;;;;2394:201:0;;;;;;:::i;:::-;;:::i;:::-;;9953:1169:31;;;;;;:::i;:::-;;:::i;:::-;;1677:33;;;;;;;;;20042:25:40;;;20030:2;20015:18;1677:33:31;;;;;;;1407:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1407:38:31;;;;-1:-1:-1;1407:38:31;:::o;2624:1910::-;3363:19:1;3386:13;;;;;;3385:14;;3433:34;;;;-1:-1:-1;3451:12:1;;3466:1;3451:12;;;;:16;3433:34;3432:108;;;-1:-1:-1;3512:4:1;1757:19:2;:23;;;3473:66:1;;-1:-1:-1;3522:12:1;;;;;:17;3473:66;3432:108;3410:204;;;;-1:-1:-1;;;3410:204:1;;14214:2:40;3410:204:1;;;14196:21:40;14253:2;14233:18;;;14226:30;14292:34;14272:18;;;14265:62;-1:-1:-1;;;14343:18:40;;;14336:44;14397:19;;3410:204:1;;;;;;;;3625:12;:16;;-1:-1:-1;;3625:16:1;3640:1;3625:16;;;3652:67;;;;3687:13;:20;;-1:-1:-1;;3687:20:1;;;;;3652:67;-1:-1:-1;;;;;2884:29:31;::::1;2876:88;;;::::0;-1:-1:-1;;;2876:88:31;;12986:2:40;2876:88:31::1;::::0;::::1;12968:21:40::0;13025:2;13005:18;;;12998:30;13064:34;13044:18;;;13037:62;-1:-1:-1;;;13115:18:40;;;13108:44;13169:19;;2876:88:31::1;;;;;;;;-1:-1:-1::0;;;;;2983:30:31;::::1;2975:90;;;::::0;-1:-1:-1;;;2975:90:31;;10984:2:40;2975:90:31::1;::::0;::::1;10966:21:40::0;11023:2;11003:18;;;10996:30;11062:34;11042:18;;;11035:62;-1:-1:-1;;;11113:18:40;;;11106:45;11168:19;;2975:90:31::1;;;;;;;;-1:-1:-1::0;;;;;3084:20:31;::::1;3076:70;;;::::0;-1:-1:-1;;;3076:70:31;;16167:2:40;3076:70:31::1;::::0;::::1;16149:21:40::0;16206:2;16186:18;;;16179:30;16245:34;16225:18;;;16218:62;-1:-1:-1;;;16296:18:40;;;16289:35;16341:19;;3076:70:31::1;;;;;;;;947:2;3165:13;:20;:41;;3157:91;;;::::0;-1:-1:-1;;;3157:91:31;;13401:2:40;3157:91:31::1;::::0;::::1;13383:21:40::0;13440:2;13420:18;;;13413:30;13479:34;13459:18;;;13452:62;-1:-1:-1;;;13530:18:40;;;13523:35;13575:19;;3157:91:31::1;;;;;;;;3259:16;:14;:16::i;:::-;3286:25;3304:6;3286:17;:25::i;:::-;3339:20:::0;;3324:12:::1;:35:::0;3370:15:::1;:34:::0;;-1:-1:-1;;;;;;3370:34:31::1;-1:-1:-1::0;;;;;3370:34:31;::::1;::::0;;::::1;::::0;;;3448:40:::1;::::0;;-1:-1:-1;;;3448:40:31;;;;-1:-1:-1;;3370:34:31;3448:38:::1;::::0;:40:::1;::::0;;::::1;::::0;-1:-1:-1;;3448:40:31;;;;;;;3370:34;3448:40;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;::::0;;::::1;-1:-1:-1::0;;3448:40:31::1;::::0;::::1;;::::0;::::1;::::0;;;::::1;::::0;::::1;:::i;:::-;3415:73:::0;-1:-1:-1;3501:18:31::1;::::0;3530:683:::1;3554:13;:20;3550:1;:24;3530:683;;;3596:13;3612;3626:1;3612:16;;;;;;-1:-1:-1::0;;;3612:16:31::1;;;;;;;;;;;;;;;3596:32;;863:4;3651:5;:34;;3643:84;;;::::0;-1:-1:-1;;;3643:84:31;;14629:2:40;3643:84:31::1;::::0;::::1;14611:21:40::0;14668:2;14648:18;;;14641:30;14707:34;14687:18;;;14680:62;-1:-1:-1;;;14758:18:40;;;14751:35;14803:19;;3643:84:31::1;;;;;;;;3742:19;3756:5:::0;3742:19;::::1;:::i;:::-;;;3778:27;3824:15;-1:-1:-1::0;;;;;3808:46:31::1;;3873:57;3888:16;3906:1;3909:13;:20;3873:14;:57::i;:::-;3949:59;3966:16;3984:1;3987:13;:20;3949:16;:59::i;:::-;4027:16;3808:250;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4087:49;::::0;;;;::::1;::::0;;-1:-1:-1;;;;;4087:49:31;;::::1;::::0;;;::::1;::::0;;::::1;::::0;;;4073:8:::1;:64:::0;;::::1;::::0;;::::1;::::0;;-1:-1:-1;4073:64:31;;;;;;::::1;::::0;;::::1;::::0;;::::1;::::0;;-1:-1:-1;;;;;;4073:64:31::1;::::0;;;::::1;;::::0;;;;;;;;;;;;;4152:42;;:21:::1;:42:::0;;;;;;:49;;-1:-1:-1;;4152:49:31::1;::::0;;::::1;::::0;;;-1:-1:-1;3576:3:31;::::1;::::0;::::1;:::i;:::-;;;;3530:683;;;;863:4;4233:10;:39;4225:90;;;::::0;-1:-1:-1;;;4225:90:31;;19691:2:40;4225:90:31::1;::::0;::::1;19673:21:40::0;19730:2;19710:18;;;19703:30;19769:34;19749:18;;;19742:62;-1:-1:-1;;;19820:18:40;;;19813:36;19866:19;;4225:90:31::1;;;;;;;;4350:15;4334:13;:31;4326:81;;;::::0;-1:-1:-1;;;4326:81:31;;16573:2:40;4326:81:31::1;::::0;::::1;16555:21:40::0;16612:2;16592:18;;;16585:30;16651:34;16631:18;;;16624:62;-1:-1:-1;;;16702:18:40;;;16695:35;16747:19;;4326:81:31::1;;;;;;;;-1:-1:-1::0;;4433:15:31::1;4418:12;:30:::0;4459:12:::1;:28:::0;;;4498:12:::1;:28:::0;;;3741:102:1;;;;3792:5;3776:21;;-1:-1:-1;;3776:21:1;;;3817:14;;-1:-1:-1;9028:36:40;;3817:14:1;;9016:2:40;9001:18;3817:14:1;;;;;;;3741:102;2624:1910:31;;;;;;;:::o;9489:402::-;9581:8;;;;9573:55;;;;-1:-1:-1;;;9573:55:31;;11400:2:40;9573:55:31;;;11382:21:40;11439:2;11419:18;;;11412:30;11478:34;11458:18;;;11451:62;-1:-1:-1;;;11529:18:40;;;11522:32;11571:19;;9573:55:31;;;;;;;;-1:-1:-1;;;;;9647:30:31;;;;;;:21;:30;;;;;;;;9639:82;;;;-1:-1:-1;;;9639:82:31;;9762:2:40;9639:82:31;;;9744:21:40;9801:2;9781:18;;;9774:30;9840:34;9820:18;;;9813:62;-1:-1:-1;;;9891:18:40;;;9884:37;9938:19;;9639:82:31;;;;;;;;9734:60;;-1:-1:-1;;;9734:60:31;;-1:-1:-1;;;;;9734:24:31;;;;;:60;;952:10:3;;;;9787:6:31;;9734:60;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9818:6;9805:9;;:19;;;;;;;:::i;:::-;;;;-1:-1:-1;9840:43:31;;-1:-1:-1;952:10:3;9867:7:31;9876:6;9840:43;;;;;;;;:::i;:::-;;;;;;;;9489:402;;:::o;11184:289::-;1374:13:0;:11;:13::i;:::-;11267:8:31::1;::::0;::::1;;11266:9;11258:60;;;::::0;-1:-1:-1;;;11258:60:31;;17749:2:40;11258:60:31::1;::::0;::::1;17731:21:40::0;17788:2;17768:18;;;17761:30;17827:34;17807:18;;;17800:62;-1:-1:-1;;;17878:18:40;;;17871:36;17924:19;;11258:60:31::1;;;;;;;;1145:2;11337:9;:24;;11329:69;;;::::0;-1:-1:-1;;;11329:69:31;;17388:2:40;11329:69:31::1;::::0;::::1;17370:21:40::0;;;17407:18;;;17400:30;17466:34;17446:18;;;17439:62;17518:18;;11329:69:31::1;;;;;;;;11409:6;:18:::0;;;11445:20:::1;::::0;20042:25:40;;;11445:20:31::1;::::0;20030:2:40;20015:18;11445:20:31::1;;;;;;;11184:289:::0;:::o;2136:103:0:-;1374:13;:11;:13::i;:::-;2201:30:::1;2228:1;2201:18;:30::i;:::-;2136:103::o:0;7804:1623:31:-;4721:15;;4706:62;;-1:-1:-1;;;4706:62:31;;4762:4;4706:62;;;6579:51:40;4672:31:31;;-1:-1:-1;;;;;4721:15:31;;4706:47;;6552:18:40;;4706:62:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4672:96;;4878:27;;4852:23;:53;4848:479;;;4958:15;;4951:48;;-1:-1:-1;;;4951:48:31;;4993:4;4951:48;;;6579:51:40;4922:26:31;;-1:-1:-1;;;;;4958:15:31;;4951:33;;6552:18:40;;4951:48:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4922:77;;5014:32;5049:151;5079:27;;5125:18;5162:23;5049:11;:151::i;:::-;5243:15;;5014:186;;-1:-1:-1;5215:100:31;;-1:-1:-1;;;;;5243:15:31;5260:7;1561:6:0;;-1:-1:-1;;;;;1561:6:0;1488:87;;5260:7:31;5269:45;5290:24;5269:18;:45;:::i;:::-;5215:27;:100::i;:::-;4848:479;;;7867:8:::1;::::0;::::1;;7866:9;7858:52;;;::::0;-1:-1:-1;;;7858:52:31;;18156:2:40;7858:52:31::1;::::0;::::1;18138:21:40::0;18195:2;18175:18;;;18168:30;18234:32;18214:18;;;18207:60;18284:18;;7858:52:31::1;;;;;;;;1561:6:0::0;;-1:-1:-1;;;;;1561:6:0;952:10:3;7929:23:31::1;::::0;:57:::1;;;7971:15;7956:12;;:30;7929:57;7921:108;;;::::0;-1:-1:-1;;;7921:108:31;;13807:2:40;7921:108:31::1;::::0;::::1;13789:21:40::0;13846:2;13826:18;;;13819:30;13885:34;13865:18;;;13858:62;-1:-1:-1;;;13936:18:40;;;13929:36;13982:19;;7921:108:31::1;;;;;;;;8040:8;:15:::0;;-1:-1:-1;;8040:15:31::1;8051:4;8040:15;::::0;;8101:8:::1;8068:41:::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;;;;;;;8040:8:::1;::::0;8068:41;;8101:8;;8040;;8068:41;::::1;;;;;;;;;::::0;;;::::1;::::0;;;;::::1;::::0;;;;::::1;::::0;;;::::1;::::0;::::1;::::0;;::::1;::::0;;-1:-1:-1;;;;;8068:41:31::1;::::0;;;;;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;::::1;;;;-1:-1:-1::0;;8156:15:31::1;::::0;8149:48:::1;::::0;-1:-1:-1;;;8149:48:31;;8191:4:::1;8149:48;::::0;::::1;6579:51:40::0;8068:41:31;;-1:-1:-1;8120:26:31::1;::::0;-1:-1:-1;;;;;8156:15:31;;::::1;::::0;-1:-1:-1;8149:33:31::1;::::0;-1:-1:-1;6552:18:40;;8149:48:31::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8120:77;;8295:9;8290:711;8333:1;8314:9;:16;:20;;;;:::i;:::-;8310:1;:24;:50;;;;;8359:1;8338:18;:22;8310:50;8290:711;;;8382:17;8402:9;8412:1;8402:12;;;;;;-1:-1:-1::0;;;8402:12:31::1;;;;;;;;;;;;;;;:18;;;8382:38;;8630:14;8647:52;8656:8;-1:-1:-1::0;;;;;8656:20:31::1;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8680:18;8647:8;:52::i;:::-;8630:69:::0;-1:-1:-1;8714:28:31::1;8630:69:::0;8714:28;::::1;:::i;:::-;8787:15;::::0;8714:28;;-1:-1:-1;8759:71:31::1;::::0;-1:-1:-1;;;;;8787:15:31::1;8812:8:::0;8823:6;8759:27:::1;:71::i;:::-;8907:8;-1:-1:-1::0;;;;;8907:15:31::1;;8931:4;8938:7;1561:6:0::0;;-1:-1:-1;;;;;1561:6:0;1488:87;;8938:7:31::1;8947:41;::::0;-1:-1:-1;;;8947:41:31;;8982:4:::1;8947:41;::::0;::::1;6579:51:40::0;-1:-1:-1;;;;;8947:26:31;::::1;::::0;::::1;::::0;6552:18:40;;8947:41:31::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8907:82;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;8290:711;;8362:3;;;;;:::i;:::-;;;;8290:711;;;-1:-1:-1::0;9079:22:31;;9075:307:::1;;9118:17;9138:9;9167:1;9148:9;:16;:20;;;;:::i;:::-;9138:31;;;;;;-1:-1:-1::0;;;9138:31:31::1;;;;;;;;;;::::0;;::::1;::::0;;;;;;:37;9218:15:::1;::::0;9138:37;;-1:-1:-1;9190:83:31::1;::::0;-1:-1:-1;;;;;9218:15:31::1;9138:37:::0;9254:18;9190:27:::1;:83::i;:::-;9288:8;-1:-1:-1::0;;;;;9288:15:31::1;;9312:4;9319:7;1561:6:0::0;;-1:-1:-1;;;;;1561:6:0;1488:87;;9319:7:31::1;9328:41;::::0;-1:-1:-1;;;9328:41:31;;9363:4:::1;9328:41;::::0;::::1;6579:51:40::0;-1:-1:-1;;;;;9328:26:31;::::1;::::0;::::1;::::0;6552:18:40;;9328:41:31::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;9288:82;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;9075:307;;9399:20;::::0;;952:10:3;6579:51:40;;9399:20:31;;::::1;::::0;;;;6567:2:40;9399:20:31;;::::1;-1:-1:-1::0;;5469:15:31;;5454:62;;-1:-1:-1;;;5454:62:31;;5510:4;5454:62;;;6579:51:40;-1:-1:-1;;;;;5469:15:31;;;;5454:47;;6552:18:40;;5454:62:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5424:27;:92;-1:-1:-1;7804:1623:31:o;5586:2156::-;4721:15;;4706:62;;-1:-1:-1;;;4706:62:31;;4762:4;4706:62;;;6579:51:40;4672:31:31;;-1:-1:-1;;;;;4721:15:31;;4706:47;;6552:18:40;;4706:62:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4672:96;;4878:27;;4852:23;:53;4848:479;;;4958:15;;4951:48;;-1:-1:-1;;;4951:48:31;;4993:4;4951:48;;;6579:51:40;4922:26:31;;-1:-1:-1;;;;;4958:15:31;;4951:33;;6552:18:40;;4951:48:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4922:77;;5014:32;5049:151;5079:27;;5125:18;5162:23;5049:11;:151::i;:::-;5243:15;;5014:186;;-1:-1:-1;5215:100:31;;-1:-1:-1;;;;;5243:15:31;5260:7;1561:6:0;;-1:-1:-1;;;;;1561:6:0;1488:87;;5260:7:31;5269:45;5290:24;5269:18;:45;:::i;:::-;5215:27;:100::i;:::-;4848:479;;;5672:1:::1;5663:6;:10;5655:53;;;::::0;-1:-1:-1;;;5655:53:31;;15808:2:40;5655:53:31::1;::::0;::::1;15790:21:40::0;15847:2;15827:18;;;15820:30;15886:32;15866:18;;;15859:60;15936:18;;5655:53:31::1;;;;;;;;5730:8;::::0;::::1;;5729:9;5721:52;;;::::0;-1:-1:-1;;;5721:52:31;;18156:2:40;5721:52:31::1;::::0;::::1;18138:21:40::0;18195:2;18175:18;;;18168:30;18234:32;18214:18;;;18207:60;18284:18;;5721:52:31::1;;;;;;;;5822:15;::::0;5815:48:::1;::::0;-1:-1:-1;;;5815:48:31;;5857:4:::1;5815:48;::::0;::::1;6579:51:40::0;5786:26:31::1;::::0;-1:-1:-1;;;;;5822:15:31::1;::::0;5815:33:::1;::::0;6552:18:40;;5815:48:31::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5786:77;;5882:12;;5898:1;5882:17;:64;;;-1:-1:-1::0;5934:12:31::1;::::0;5903:27:::1;5924:6:::0;5903:18;:27:::1;:::i;:::-;:43;;5882:64;5874:106;;;::::0;-1:-1:-1;;;5874:106:31;;12628:2:40;5874:106:31::1;::::0;::::1;12610:21:40::0;12667:2;12647:18;;;12640:30;12706:31;12686:18;;;12679:59;12755:18;;5874:106:31::1;;;;;;;;5993:30;6026:8;5993:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;;::::1;::::0;;;;::::1;::::0;;;;::::1;::::0;;;::::1;::::0;::::1;::::0;;::::1;::::0;;-1:-1:-1;;;;;5993:41:31::1;::::0;;;;;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;::::1;;;;;;;;;;6047:15;6073:30:::0;6120:12:::1;;6106:27;;;;;;-1:-1:-1::0;;;6106:27:31::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;-1:-1:-1;6106:27:31::1;;6073:60;;6149:9;6144:753;6168:9;:16;6164:1;:20;6144:753;;;6300:20;863:4;6333:9;6343:1;6333:12;;;;;;-1:-1:-1::0;;;6333:12:31::1;;;;;;;;;;;;;;;:18;;;6324:6;:27;;;;:::i;:::-;6323:57;;;;:::i;:::-;6300:80;;6676:1;6655:18;:22;:39;;;;;6693:1;6681:9;;:13;6655:39;6651:151;;;6730:56;6742:12;6756:9;;6767:18;6730:11;:56::i;:::-;6715:71;;6651:151;6816:23;6827:12:::0;6816:23;::::1;:::i;:::-;;;6873:12;6854:13;6868:1;6854:16;;;;;;-1:-1:-1::0;;;6854:16:31::1;;;;;;;;;;::::0;;::::1;::::0;;;;;:31;-1:-1:-1;6186:3:31;::::1;::::0;::::1;:::i;:::-;;;;6144:753;;;;6920:7;6907:9;;:20;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;6972:15:31::1;::::0;6940:85:::1;::::0;-1:-1:-1;;;;;6972:15:31::1;952:10:3::0;7011:4:31::1;7018:6;6940:31;:85::i;:::-;7109:6;::::0;7091:15:::1;7126:523;7150:13;:20;7146:1;:24;7126:523;;;7192:20;7215:13;7229:1;7215:16;;;;;;-1:-1:-1::0;;;7215:16:31::1;;;;;;;;;;;;;;;7192:39;;7414:11;1048:6;7444:7;7429:12;:22;;;;:::i;:::-;7428:30;;;;:::i;:::-;7414:44:::0;-1:-1:-1;7477:7:31;;7473:91:::1;;7505:9;7515:1;7505:12;;;;;;-1:-1:-1::0;;;7505:12:31::1;;;;;;;;;;::::0;;::::1;::::0;;;;;;:18;:43:::1;::::0;-1:-1:-1;;;7505:43:31;;7537:4:::1;7505:43;::::0;::::1;7932:51:40::0;7999:18;;;7992:34;;;-1:-1:-1;;;;;7505:23:31;;::::1;::::0;::::1;::::0;7905:18:40;;7505:43:31::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;7473:91;7580:9;7590:1;7580:12;;;;;;-1:-1:-1::0;;;7580:12:31::1;;;;;;;;;;;;;;;:18;;;-1:-1:-1::0;;;;;7580:23:31::1;;7604:12;952:10:3::0;872:98;;7604:12:31::1;7618:18;7633:3:::0;7618:12;:18:::1;:::i;:::-;7580:57;::::0;-1:-1:-1;;;;;;7580:57:31::1;::::0;;;;;;-1:-1:-1;;;;;7950:32:40;;;7580:57:31::1;::::0;::::1;7932:51:40::0;7999:18;;;7992:34;7905:18;;7580:57:31::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;7126:523;;7172:3;;;;;:::i;:::-;;;;7126:523;;;-1:-1:-1::0;7664:38:31::1;::::0;;952:10:3;8239:51:40;;8321:2;8306:18;;8299:34;;;8349:18;;;8342:34;;;7664:38:31;;::::1;::::0;;;;8227:2:40;7664:38:31;;::::1;7715:19;:17;:19::i;:::-;-1:-1:-1::0;;5469:15:31;;5454:62;;-1:-1:-1;;;5454:62:31;;5510:4;5454:62;;;6579:51:40;-1:-1:-1;;;;;5469:15:31;;;;-1:-1:-1;5454:47:31;;-1:-1:-1;6552:18:40;;;-1:-1:-1;5454:62:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5424:27;:92;-1:-1:-1;;5586:2156:31:o;13627:495::-;13748:15;;13733:62;;-1:-1:-1;;;13733:62:31;;13789:4;13733:62;;;6579:51:40;13679:7:31;;;;-1:-1:-1;;;;;13748:15:31;;;;13733:47;;6552:18:40;;13733:62:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13842:15;;13835:48;;-1:-1:-1;;;13835:48:31;;13877:4;13835:48;;;6579:51:40;13699:96:31;;-1:-1:-1;13806:26:31;;-1:-1:-1;;;;;13842:15:31;;;;13835:33;;6552:18:40;;13835:48:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13806:77;;13943:27;;13917:23;:53;13916:198;;14096:18;13916:198;;;13991:85;14003:27;;14032:18;14052:23;13991:11;:85::i;:::-;13916:198;13896:218;;;;13627:495;:::o;2394:201:0:-;1374:13;:11;:13::i;:::-;-1:-1:-1;;;;;2483:22:0;::::1;2475:73;;;::::0;-1:-1:-1;;;2475:73:0;;10170:2:40;2475:73:0::1;::::0;::::1;10152:21:40::0;10209:2;10189:18;;;10182:30;10248:34;10228:18;;;10221:62;-1:-1:-1;;;10299:18:40;;;10292:36;10345:19;;2475:73:0::1;;;;;;;;2559:28;2578:8;2559:18;:28::i;:::-;2394:201:::0;:::o;9953:1169:31:-;4721:15;;4706:62;;-1:-1:-1;;;4706:62:31;;4762:4;4706:62;;;6579:51:40;4672:31:31;;-1:-1:-1;;;;;4721:15:31;;4706:47;;6552:18:40;;4706:62:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4672:96;;4878:27;;4852:23;:53;4848:479;;;4958:15;;4951:48;;-1:-1:-1;;;4951:48:31;;4993:4;4951:48;;;6579:51:40;4922:26:31;;-1:-1:-1;;;;;4958:15:31;;4951:33;;6552:18:40;;4951:48:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4922:77;;5014:32;5049:151;5079:27;;5125:18;5162:23;5049:11;:151::i;:::-;5243:15;;5014:186;;-1:-1:-1;5215:100:31;;-1:-1:-1;;;;;5243:15:31;5260:7;1561:6:0;;-1:-1:-1;;;;;1561:6:0;1488:87;;5260:7:31;5269:45;5290:24;5269:18;:45;:::i;:::-;5215:27;:100::i;:::-;4848:479;;;10040:8:::1;::::0;::::1;;10039:9;10031:60;;;::::0;-1:-1:-1;;;10031:60:31;;12221:2:40;10031:60:31::1;::::0;::::1;12203:21:40::0;12260:2;12240:18;;;12233:30;12299:34;12279:18;;;12272:62;-1:-1:-1;;;12350:18:40;;;12343:36;12396:19;;10031:60:31::1;;;;;;;;10104:30;10137:8;10104:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;;;::::1;::::0;;;;::::1;::::0;;;;::::1;::::0;;;::::1;::::0;::::1;::::0;;::::1;::::0;;-1:-1:-1;;;;;10104:41:31::1;::::0;;;;;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;::::1;;;;;;;;;;10182:9;:16;10164:7;:14;:34;10156:85;;;::::0;-1:-1:-1;;;10156:85:31;;10577:2:40;10156:85:31::1;::::0;::::1;10559:21:40::0;10616:2;10596:18;;;10589:30;10655:34;10635:18;;;10628:62;-1:-1:-1;;;10706:18:40;;;10699:36;10752:19;;10156:85:31::1;;;;;;;;10252:13;::::0;10278:91:::1;10302:7;:14;10298:1;:18;10278:91;;;10347:7;10355:1;10347:10;;;;;;-1:-1:-1::0;;;10347:10:31::1;;;;;;;;;;;;;;;10338:19;;;;;:::i;:::-;::::0;-1:-1:-1;10318:3:31;::::1;::::0;::::1;:::i;:::-;;;;10278:91;;;;10386:9;10381:308;10405:7;:14;10401:1;:18;10381:308;;;10519:9;10529:1;10519:12;;;;;;-1:-1:-1::0;;;10519:12:31::1;;;;;;;;;;;;;;;:18;;;10510:5;863:4;10468:7;10476:1;10468:10;;;;;;-1:-1:-1::0;;;10468:10:31::1;;;;;;;;;;;;;;;:38;;;;:::i;:::-;10467:48;;;;:::i;:::-;:70;10441:172;;;::::0;-1:-1:-1;;;10441:172:31;;16979:2:40;10441:172:31::1;::::0;::::1;16961:21:40::0;17018:2;16998:18;;;16991:30;17057:34;17037:18;;;17030:62;-1:-1:-1;;;17108:18:40;;;17101:38;17156:19;;10441:172:31::1;;;;;;;;10628:9;10638:1;10628:12;;;;;;-1:-1:-1::0;;;10628:12:31::1;;;;;;;;;;;;;;;:18;;;-1:-1:-1::0;;;;;10628:23:31::1;;10652:12;952:10:3::0;872:98;;10652:12:31::1;10666:7;10674:1;10666:10;;;;;;-1:-1:-1::0;;;10666:10:31::1;;;;;;;;;;;;;;;10628:49;;;;;;;;;;;;;;;-1:-1:-1::0;;;;;7950:32:40;;;;7932:51;;8014:2;7999:18;;7992:34;7920:2;7905:18;;7887:145;10628:49:31::1;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;10421:3;;;;;:::i;:::-;;;;10381:308;;;-1:-1:-1::0;10737:15:31::1;::::0;10730:48:::1;::::0;-1:-1:-1;;;10730:48:31;;10772:4:::1;10730:48;::::0;::::1;6579:51:40::0;10701:26:31::1;::::0;-1:-1:-1;;;;;10737:15:31::1;::::0;10730:33:::1;::::0;6552:18:40;;10730:48:31::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;10701:77;;10851:20;10874:49;10886:5;10893:18;10913:9;;10874:11;:49::i;:::-;10851:72;;10949:5;10936:9;;:18;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;;10993:15:31::1;::::0;10965:72:::1;::::0;-1:-1:-1;;;;;10993:15:31::1;952:10:3::0;11024:12:31::1;10965:27;:72::i;:::-;11053:29;952:10:3::0;11074:7:31::1;11053:29;;;;;;;:::i;:::-;;;;;;;;11095:19;:17;:19::i;:::-;-1:-1:-1::0;;5469:15:31;;5454:62;;-1:-1:-1;;;5454:62:31;;5510:4;5454:62;;;6579:51:40;-1:-1:-1;;;;;5469:15:31;;;;-1:-1:-1;5454:47:31;;-1:-1:-1;6552:18:40;;5454:62:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5424:27;:92;-1:-1:-1;;9953:1169:31:o;1031:97:0:-;5506:13:1;;;;;;;5498:69;;;;-1:-1:-1;;;5498:69:1;;;;;;;:::i;:::-;;;;;;;;;1094:26:0::1;:24;:26::i;:::-;1031:97::o:0;11757:310:31:-;11908:13;11996:16;12019:38;12036:5;12043:13;12019:16;:38::i;:::-;11961:97;;;;;;;;;:::i;:::-;;;;;;;;;;;;;11934:125;;11757:310;;;;;:::o;12355:293::-;12508:13;12577:16;12600:38;12617:5;12624:13;12600:16;:38::i;:::-;12548:91;;;;;;;;;:::i;:::-;;;;;;;;;;;;;12534:106;;12355:293;;;;;:::o;1653:132:0:-;1561:6;;-1:-1:-1;;;;;1561:6:0;952:10:3;1717:23:0;1709:68;;;;-1:-1:-1;;;1709:68:0;;15035:2:40;1709:68:0;;;15017:21:40;;;15054:18;;;15047:30;15113:34;15093:18;;;15086:62;15165:18;;1709:68:0;;;;;;;;1653:132::o;2755:191::-;2848:6;;;-1:-1:-1;;;;;2865:17:0;;;-1:-1:-1;;;;;;2865:17:0;;;;;;;2898:40;;2848:6;;;2865:17;2848:6;;2898:40;;2829:16;;2898:40;2755:191;;:::o;1721:4292:9:-;1803:14;;;-1:-1:-1;;2348:1:9;2345;2338:20;2392:1;2389;2385:9;2376:18;;2448:5;2444:2;2441:13;2433:5;2429:2;2425:14;2421:34;2412:43;;;2554:5;2563:1;2554:10;2550:373;;;2896:11;2888:5;:19;;;-1:-1:-1;;;2888:19:9;;;;;;;;;;2881:26;;;;;;2550:373;3050:5;3036:11;:19;3028:53;;;;-1:-1:-1;;;3028:53:9;;18927:2:40;3028:53:9;;;18909:21:40;18966:2;18946:18;;;18939:30;-1:-1:-1;;;18985:18:40;;;18978:51;19046:18;;3028:53:9;;;;;;;;3344:17;3482:11;3479:1;3476;3469:25;4026:12;;4041:1;4026:16;;;4011:32;;4149:22;;;;;3647:21;;;4250:16;;;3599:20;;;;3588:32;;;3996:12;4400;;;4396:23;;;;4392:31;;;4516:12;;;;4507:21;;;;4870:1;:15;;4889:1;4869:21;;;5126;;;5122:25;;5111:36;5196:21;;;5192:25;;5181:36;5267:21;;;5263:25;;5252:36;5338:21;;;5334:25;;5323:36;5409:21;;;5405:25;;5394:36;5481:21;;;5477:25;;;5466:36;5951:15;;-1:-1:-1;;1721:4292:9;;;;;;:::o;671:449:30:-;903:45;;;-1:-1:-1;;;;;7950:32:40;;;903:45:30;;;7932:51:40;7999:18;;;;7992:34;;;903:45:30;;;;;;;;;;7905:18:40;;;;903:45:30;;;;;;;-1:-1:-1;;;;;903:45:30;-1:-1:-1;;;903:45:30;;;892:57;;-1:-1:-1;;;;892:10:30;;;;:57;;903:45;892:57;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;856:93;;;;982:7;:57;;;;-1:-1:-1;994:11:30;;:16;;:44;;;1025:4;1014:24;;;;;;;;;;;;:::i;:::-;994:44;982:57;960:152;;;;-1:-1:-1;;;960:152:30;;19277:2:40;960:152:30;;;19259:21:40;19316:2;19296:18;;;19289:30;19355:34;19335:18;;;19328:62;-1:-1:-1;;;19406:18:40;;;19399:43;19459:19;;960:152:30;;;;;;;;671:449;;;;;:::o;613:106:9:-;671:7;702:1;698;:5;:13;;710:1;698:13;;;706:1;698:13;691:20;613:106;-1:-1:-1;;;613:106:9:o;1128:498:30:-;1353:12;1367:17;1388:5;-1:-1:-1;;;;;1388:10:30;1422;1434:4;1440:2;1444:5;1399:51;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1399:51:30;;;;;;;;;;;1388:63;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1352:99;;;;1484:7;:57;;;;-1:-1:-1;1496:11:30;;:16;;:44;;;1527:4;1516:24;;;;;;;;;;;;:::i;:::-;1496:44;1484:57;1462:156;;;;-1:-1:-1;;;1462:156:30;;11803:2:40;1462:156:30;;;11785:21:40;11842:2;11822:18;;;11815:30;11881:34;11861:18;;;11854:62;-1:-1:-1;;;11932:18:40;;;11925:47;11989:19;;1462:156:30;;;;;;;;1128:498;;;;;;:::o;13350:144:31:-;1348:4;13407:9;;:31;;13399:87;;;;-1:-1:-1;;;13399:87:31;;15396:2:40;13399:87:31;;;15378:21:40;15435:2;15415:18;;;15408:30;15474:34;15454:18;;;15447:62;-1:-1:-1;;;15525:18:40;;;15518:41;15576:19;;13399:87:31;;;;;;;;13350:144::o;1136:113:0:-;5506:13:1;;;;;;;5498:69;;;;-1:-1:-1;;;5498:69:1;;;;;;;:::i;:::-;;;;;;;;;1209:32:0::1;952:10:3::0;1209:18:0::1;:32::i;:::-;1136:113::o:0;12881:412:31:-;13024:34;;;;;;;;;;;;;;;;13091:12;;13101:1;13091:12;;;;;;;;;12968:13;;-1:-1:-1;;13091:12:31;;;;;;;;;;;-1:-1:-1;;13069:34:31;-1:-1:-1;13127:17:31;13143:1;13127:13;:17;:::i;:::-;13118:5;:26;13114:140;;;-1:-1:-1;;;13161:6:31;13168:1;13161:9;;;;;;-1:-1:-1;;;13161:9:31;;;;;;;;;;;;:15;-1:-1:-1;;;;;13161:15:31;;;;;;;;;13114:140;;;13221:14;13236:5;13221:21;;;;;;-1:-1:-1;;;13221:21:31;;;;;;;;;;;;;;;;;13209:6;13216:1;13209:9;;;;;;-1:-1:-1;;;13209:9:31;;;;;;;;;;;;:33;-1:-1:-1;;;;;13209:33:31;;;;;;;;;13114:140;13278:6;12881:412;-1:-1:-1;;;;12881:412:31:o;14:743:40:-;;121:3;114:4;106:6;102:17;98:27;88:2;;143:5;136;129:20;88:2;183:6;170:20;209:4;232:18;228:2;225:26;222:2;;;254:18;;:::i;:::-;222:2;300;297:1;293:10;323:28;347:2;343;339:11;323:28;:::i;:::-;385:15;;;416:12;;;;448:15;;;482;;;478:24;;475:33;-1:-1:-1;472:2:40;;;525:5;518;511:20;472:2;551:5;542:14;;565:163;579:2;576:1;573:9;565:163;;;636:17;;624:30;;597:1;590:9;;;;;674:12;;;;706;;565:163;;;-1:-1:-1;746:5:40;78:679;-1:-1:-1;;;;;;;78:679:40:o;762:257::-;;874:2;862:9;853:7;849:23;845:32;842:2;;;895:6;887;880:22;842:2;939:9;926:23;958:31;983:5;958:31;:::i;:::-;1008:5;832:187;-1:-1:-1;;;832:187:40:o;1024:261::-;;1147:2;1135:9;1126:7;1122:23;1118:32;1115:2;;;1168:6;1160;1153:22;1115:2;1205:9;1199:16;1224:31;1249:5;1224:31;:::i;:::-;1274:5;1105:180;-1:-1:-1;;;1105:180:40:o;1290:924::-;;;;;;;1512:3;1500:9;1491:7;1487:23;1483:33;1480:2;;;1534:6;1526;1519:22;1480:2;1578:9;1565:23;1597:31;1622:5;1597:31;:::i;:::-;1647:5;-1:-1:-1;1704:2:40;1689:18;;1676:32;1717:33;1676:32;1717:33;:::i;:::-;1769:7;-1:-1:-1;1828:2:40;1813:18;;1800:32;1841:33;1800:32;1841:33;:::i;:::-;1893:7;-1:-1:-1;1951:2:40;1936:18;;1923:32;1978:18;1967:30;;1964:2;;;2015:6;2007;2000:22;1964:2;2043:61;2096:7;2087:6;2076:9;2072:22;2043:61;:::i;:::-;2033:71;;;2151:3;2140:9;2136:19;2123:33;2113:43;;2203:3;2192:9;2188:19;2175:33;2165:43;;1470:744;;;;;;;;:::o;2219:325::-;;;2348:2;2336:9;2327:7;2323:23;2319:32;2316:2;;;2369:6;2361;2354:22;2316:2;2413:9;2400:23;2432:31;2457:5;2432:31;:::i;:::-;2482:5;2534:2;2519:18;;;;2506:32;;-1:-1:-1;;;2306:238:40:o;2549:368::-;;2686:2;2674:9;2665:7;2661:23;2657:32;2654:2;;;2707:6;2699;2692:22;2654:2;2752:9;2739:23;2785:18;2777:6;2774:30;2771:2;;;2822:6;2814;2807:22;2771:2;2850:61;2903:7;2894:6;2883:9;2879:22;2850:61;:::i;:::-;2840:71;2644:273;-1:-1:-1;;;;2644:273:40:o;2922:297::-;;3042:2;3030:9;3021:7;3017:23;3013:32;3010:2;;;3063:6;3055;3048:22;3010:2;3100:9;3094:16;3153:5;3146:13;3139:21;3132:5;3129:32;3119:2;;3180:6;3172;3165:22;3119:2;3208:5;3000:219;-1:-1:-1;;;3000:219:40:o;3224:746::-;;3357:2;3345:9;3336:7;3332:23;3328:32;3325:2;;;3378:6;3370;3363:22;3325:2;3416:9;3410:16;3445:18;3486:2;3478:6;3475:14;3472:2;;;3507:6;3499;3492:22;3472:2;3550:6;3539:9;3535:22;3525:32;;3595:7;3588:4;3584:2;3580:13;3576:27;3566:2;;3622:6;3614;3607:22;3566:2;3656;3650:9;3678:2;3674;3671:10;3668:2;;;3684:18;;:::i;:::-;3668:2;3726:53;3769:2;3750:13;;-1:-1:-1;;3746:27:40;3775:2;3742:36;3726:53;:::i;:::-;3713:66;;3802:2;3795:5;3788:17;3842:7;3837:2;3832;3828;3824:11;3820:20;3817:33;3814:2;;;3868:6;3860;3853:22;3814:2;3886:54;3937:2;3932;3925:5;3921:14;3916:2;3912;3908:11;3886:54;:::i;:::-;-1:-1:-1;3959:5:40;3315:655;-1:-1:-1;;;;3315:655:40:o;3975:190::-;;4087:2;4075:9;4066:7;4062:23;4058:32;4055:2;;;4108:6;4100;4093:22;4055:2;-1:-1:-1;4136:23:40;;4045:120;-1:-1:-1;4045:120:40:o;4170:194::-;;4293:2;4281:9;4272:7;4268:23;4264:32;4261:2;;;4314:6;4306;4299:22;4261:2;-1:-1:-1;4342:16:40;;4251:113;-1:-1:-1;4251:113:40:o;4369:258::-;;4449:5;4443:12;4476:6;4471:3;4464:19;4492:63;4548:6;4541:4;4536:3;4532:14;4525:4;4518:5;4514:16;4492:63;:::i;:::-;4609:2;4588:15;-1:-1:-1;;4584:29:40;4575:39;;;;4616:4;4571:50;;4419:208;-1:-1:-1;;4419:208:40:o;4632:274::-;;4799:6;4793:13;4815:53;4861:6;4856:3;4849:4;4841:6;4837:17;4815:53;:::i;:::-;4884:16;;;;;4769:137;-1:-1:-1;;4769:137:40:o;4911:761::-;;-1:-1:-1;;;5317:3:40;5310:29;5368:6;5362:13;5384:62;5439:6;5434:2;5429:3;5425:12;5418:4;5410:6;5406:17;5384:62;:::i;:::-;-1:-1:-1;;;5505:2:40;5465:16;;;5497:11;;;5490:24;5539:13;;5561:63;5539:13;5610:2;5602:11;;5595:4;5583:17;;5561:63;:::i;:::-;5644:17;5663:2;5640:26;;5300:372;-1:-1:-1;;;;5300:372:40:o;5677:751::-;;-1:-1:-1;;;6083:3:40;6076:23;6128:6;6122:13;6144:61;6198:6;6194:1;6189:3;6185:11;6178:4;6170:6;6166:17;6144:61;:::i;:::-;-1:-1:-1;;;6264:1:40;6224:16;;;6256:10;;;6249:23;6297:13;;6319:62;6297:13;6368:1;6360:10;;6353:4;6341:17;;6319:62;:::i;:::-;6401:17;6420:1;6397:25;;6066:362;-1:-1:-1;;;;6066:362:40:o;6641:375::-;-1:-1:-1;;;;;6899:15:40;;;6881:34;;6951:15;;;;6946:2;6931:18;;6924:43;6998:2;6983:18;;6976:34;;;;6831:2;6816:18;;6798:218::o;7021:732::-;-1:-1:-1;;;;;7269:32:40;;7251:51;;7239:2;7321;7339:18;;;7332:30;;;7411:13;;7224:18;;;7433:22;;;7021:732;;7512:15;;;;7321:2;7486;7471:18;;;7021:732;7558:169;7572:6;7569:1;7566:13;7558:169;;;7633:13;;7621:26;;7702:15;;;;7667:12;;;;7594:1;7587:9;7558:169;;;-1:-1:-1;7744:3:40;;7200:553;-1:-1:-1;;;;;;;7200:553:40:o;9075:480::-;;9300:2;9289:9;9282:21;9326:45;9367:2;9356:9;9352:18;9344:6;9326:45;:::i;:::-;9419:9;9411:6;9407:22;9402:2;9391:9;9387:18;9380:50;9447:33;9473:6;9465;9447:33;:::i;:::-;9439:41;;;9545:1;9541;9536:3;9532:11;9528:19;9520:6;9516:32;9511:2;9500:9;9496:18;9489:60;9272:283;;;;;;:::o;18313:407::-;18515:2;18497:21;;;18554:2;18534:18;;;18527:30;18593:34;18588:2;18573:18;;18566:62;-1:-1:-1;;;18659:2:40;18644:18;;18637:41;18710:3;18695:19;;18487:233::o;20078:275::-;20149:2;20143:9;20214:2;20195:13;;-1:-1:-1;;20191:27:40;20179:40;;20249:18;20234:34;;20270:22;;;20231:62;20228:2;;;20296:18;;:::i;:::-;20228:2;20332;20325:22;20123:230;;-1:-1:-1;20123:230:40:o;20358:128::-;;20429:1;20425:6;20422:1;20419:13;20416:2;;;20435:18;;:::i;:::-;20416:2;-1:-1:-1;20471:9:40;;20406:80::o;20491:217::-;;20557:1;20547:2;;-1:-1:-1;;;20582:31:40;;20636:4;20633:1;20626:15;20664:4;20589:1;20654:15;20547:2;-1:-1:-1;20693:9:40;;20537:171::o;20713:168::-;;20819:1;20815;20811:6;20807:14;20804:1;20801:21;20796:1;20789:9;20782:17;20778:45;20775:2;;;20826:18;;:::i;:::-;20775:2;-1:-1:-1;20866:9:40;;20765:116::o;20886:125::-;;20954:1;20951;20948:8;20945:2;;;20959:18;;:::i;:::-;20945:2;-1:-1:-1;20996:9:40;;20935:76::o;21016:258::-;21088:1;21098:113;21112:6;21109:1;21106:13;21098:113;;;21188:11;;;21182:18;21169:11;;;21162:39;21134:2;21127:10;21098:113;;;21229:6;21226:1;21223:13;21220:2;;;21264:1;21255:6;21250:3;21246:16;21239:27;21220:2;;21069:205;;;:::o;21279:135::-;;-1:-1:-1;;21339:17:40;;21336:2;;;21359:18;;:::i;:::-;21336:2;-1:-1:-1;21406:1:40;21395:13;;21326:88::o;21419:127::-;21480:10;21475:3;21471:20;21468:1;21461:31;21511:4;21508:1;21501:15;21535:4;21532:1;21525:15;21551:127;21612:10;21607:3;21603:20;21600:1;21593:31;21643:4;21640:1;21633:15;21667:4;21664:1;21657:15;21683:131;-1:-1:-1;;;;;21758:31:40;;21748:42;;21738:2;;21804:1;21801;21794:12;21738:2;21728:86;:::o","constructor":null,"functions":[{"id":"lib/tranche/contracts/BondController.sol:BondController:collateralBalance()(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"collateralBalance():(uint256)","shortSignature":"c98c05b7","name":"collateralBalance","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:collateralToken()(address)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"collateralToken():(address)","shortSignature":"b2016bd4","name":"collateralToken","inputs":[],"outputs":[{"name":"","kind":"Address","internalType":"address"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:creationDate()(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"creationDate():(uint256)","shortSignature":"05b34410","name":"creationDate","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:deposit(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"deposit(uint256)","shortSignature":"b6b55f25","name":"deposit","inputs":[{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:depositLimit()(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"depositLimit():(uint256)","shortSignature":"ecf70858","name":"depositLimit","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:feeBps()(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"feeBps():(uint256)","shortSignature":"24a9d853","name":"feeBps","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:init(address,address,address,uint256[],uint256,uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"init(address,address,address,uint256[],uint256,uint256)","shortSignature":"2a76ef31","name":"init","inputs":[{"name":"_trancheFactory","kind":"Address","internalType":"address"},{"name":"_collateralToken","kind":"Address","internalType":"address"},{"name":"_admin","kind":"Address","internalType":"address"},{"name":"trancheRatios","kind":{"Array":{"Uint":256}},"internalType":"uint256[]"},{"name":"_maturityDate","kind":{"Uint":256},"internalType":"uint256"},{"name":"_depositLimit","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:isMature()(bool)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"isMature():(bool)","shortSignature":"ae4e7fdf","name":"isMature","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:lastScaledCollateralBalance()(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"lastScaledCollateralBalance():(uint256)","shortSignature":"9f0205c7","name":"lastScaledCollateralBalance","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:mature()","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"mature()","shortSignature":"87b65207","name":"mature","inputs":[],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:maturityDate()(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"maturityDate():(uint256)","shortSignature":"d59624b4","name":"maturityDate","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:owner()(address)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"owner():(address)","shortSignature":"8da5cb5b","name":"owner","inputs":[],"outputs":[{"name":"","kind":"Address","internalType":"address"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:redeem(uint256[])","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"redeem(uint256[])","shortSignature":"f9afb26a","name":"redeem","inputs":[{"name":"amounts","kind":{"Array":{"Uint":256}},"internalType":"uint256[]"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:redeemMature(address,uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"redeemMature(address,uint256)","shortSignature":"33d20e34","name":"redeemMature","inputs":[{"name":"tranche","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:renounceOwnership()","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"renounceOwnership()","shortSignature":"715018a6","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:setFee(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"setFee(uint256)","shortSignature":"69fe0e2d","name":"setFee","inputs":[{"name":"newFeeBps","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:totalDebt()(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"totalDebt():(uint256)","shortSignature":"fc7b9c18","name":"totalDebt","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:trancheCount()(uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"trancheCount():(uint256)","shortSignature":"59eb8224","name":"trancheCount","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:trancheTokenAddresses(address)(bool)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"trancheTokenAddresses(address):(bool)","shortSignature":"20e8e89e","name":"trancheTokenAddresses","inputs":[{"name":"","kind":"Address","internalType":"address"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:tranches(uint256)(address,uint256)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"tranches(uint256):(address,uint256)","shortSignature":"26c25962","name":"tranches","inputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"token","kind":"Address","internalType":"contract ITranche"},{"name":"ratio","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/BondController.sol:BondController:transferOwnership(address)","contractId":"lib/tranche/contracts/BondController.sol:BondController","signature":"transferOwnership(address)","shortSignature":"f2fde38b","name":"transferOwnership","inputs":[{"name":"newOwner","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[]},{"name":"Tranche","artifactPath":"out/Tranche.sol/Tranche.json","sourcePath":"lib/tranche/contracts/Tranche.sol","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","sourceFileId":32,"sourceContent":"pragma solidity 0.8.3;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"./interfaces/ITranche.sol\";\r\nimport \"./external/ERC20.sol\";\r\n\r\n/**\r\n * @dev ERC20 token to represent a single tranche for a ButtonTranche bond\r\n * Note: this contract has non-transferrable ownership given at init-time\r\n */\r\ncontract Tranche is ITranche, ERC20, Initializable {\r\n    address public collateralToken;\r\n    address public override bond;\r\n\r\n    /**\r\n     * @dev Constructor for Tranche ERC20 token\r\n     */\r\n    constructor() ERC20(\"IMPLEMENTATION\", \"IMPL\") {\r\n        collateralToken = address(0x0);\r\n    }\r\n\r\n    /**\r\n     * @dev Constructor for Tranche ERC20 token\r\n     * @param name the ERC20 token name\r\n     * @param symbol The ERC20 token symbol\r\n     * @param _bond The BondController which owns this Tranche token\r\n     * @param _collateralToken The address of the ERC20 collateral token\r\n     */\r\n    function init(\r\n        string memory name,\r\n        string memory symbol,\r\n        address _bond,\r\n        address _collateralToken\r\n    ) public initializer {\r\n        require(_bond != address(0), \"Tranche: invalid bond address\");\r\n        require(_collateralToken != address(0), \"Tranche: invalid collateralToken address\");\r\n\r\n        bond = _bond;\r\n        collateralToken = _collateralToken;\r\n\r\n        super.init(name, symbol);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the bond.\r\n     */\r\n    modifier onlyBond() {\r\n        require(bond == _msgSender(), \"Ownable: caller is not the bond\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ITranche\r\n     */\r\n    function mint(address to, uint256 amount) external override onlyBond {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ITranche\r\n     */\r\n    function burn(address from, uint256 amount) external override onlyBond {\r\n        _burn(from, amount);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ITranche\r\n     */\r\n    function redeem(address from, address to, uint256 amount) external override onlyBond {\r\n        // calculate collateral return value as the proportion of total supply redeemed\r\n        // NOTE: solidity 0.8 has built-in overflow checking so SafeMath is not necessary\r\n        uint256 collateralAmount = (IERC20(collateralToken).balanceOf(address(this)) * amount) / totalSupply();\r\n\r\n        _burn(from, amount);\r\n        TransferHelper.safeTransfer(collateralToken, to, collateralAmount);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Uses the same number of decimals as the collateral token\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view override returns (uint8) {\r\n        return IERC20Metadata(collateralToken).decimals();\r\n    }\r\n}\r\n","sourceMap":"521:2772:32:-:0;;;720:95;;;;;;;;;-1:-1:-1;1941:116:33;;;;;;;;;;;-1:-1:-1;;;1941:116:33;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1941:116:33;;;;2008:13;;1941:116;;;2008:13;;:5;;:13;:::i;:::-;-1:-1:-1;2032:17:33;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;;777:15:32::1;:30:::0;;-1:-1:-1;;;;;;777:30:32::1;::::0;;-1:-1:-1;521:2772:32;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;521:2772:32;;;-1:-1:-1;521:2772:32;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;14:380:40:-;93:1;89:12;;;;136;;;157:2;;211:4;203:6;199:17;189:27;;157:2;264;256:6;253:14;233:18;230:38;227:2;;;310:10;305:3;301:20;298:1;291:31;345:4;342:1;335:15;373:4;370:1;363:15;227:2;;69:325;;;:::o;521:2772:32:-;;;;;;;","sourceMapDeployed":"521:2772:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2573:91:33;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4713:169;;;;;;:::i;:::-;;:::i;:::-;;;5059:14:40;;5052:22;5034:41;;5022:2;5007:18;4713:169:33;;;;;;;1120:440:32;;;;;;:::i;:::-;;:::i;:::-;;2146:495;;;;;;:::i;:::-;;:::i;:::-;;3666:108:33;3754:12;;3666:108;;11780:25:40;;;11768:2;11753:18;3666:108:33;;;;;;;5364:456;;;;;;:::i;:::-;;:::i;:::-;;;5059:14:40;;5052:22;5034:41;;5022:2;5007:18;5364:456:33;;;;;;;3165:125:32;;;:::i;:::-;;;11988:4:40;11976:17;;;11958:36;;11946:2;11931:18;3165:125:32;;;;;;;6229:215:33;;;;;;:::i;:::-;;:::i;:::-;;;5059:14:40;;5052:22;5034:41;;5022:2;5007:18;6229:215:33;;;;;;;1822:105:32;;;;;;:::i;:::-;;:::i;:::-;;616:28;;;;;-1:-1:-1;;;;;616:28:32;;;;;;-1:-1:-1;;;;;4571:32:40;;;4553:51;;4541:2;4526:18;616:28:32;;;;;;;2378:125:33;;;;;;:::i;:::-;;:::i;:::-;;3837:127;;;;;;:::i;:::-;-1:-1:-1;;;;;3938:18:33;3911:7;3938:18;;;;;;;;;;;;3837:127;;;;11780:25:40;;;11768:2;11753:18;3837:127:33;;;;;;;2783:95;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1982:109:32;;;;;;:::i;:::-;;:::i;:::-;;6947:377:33;;;;;;:::i;:::-;;:::i;:::-;;;5059:14:40;;5052:22;5034:41;;5022:2;5007:18;6947:377:33;;;;;;;4177:175;;;;;;:::i;:::-;;:::i;:::-;;;5059:14:40;;5052:22;5034:41;;5022:2;5007:18;4177:175:33;;;;;;;579:30:32;;;;;;;;-1:-1:-1;;;;;579:30:32;;;;;;-1:-1:-1;;;;;4571:32:40;;;4553:51;;4541:2;4526:18;579:30:32;;;;;;;4415:151:33;;;;;;:::i;:::-;-1:-1:-1;;;;;4531:18:33;;;4504:7;4531:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4415:151;;;;11780:25:40;;;11768:2;11753:18;4415:151:33;;;;;;;2573:91;2618:13;2651:5;2644:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2573:91;:::o;4713:169::-;4796:4;4813:39;736:10:8;4836:7:33;4845:6;4813:8;:39::i;:::-;-1:-1:-1;4870:4:33;4713:169;;;;:::o;1120:440:32:-;3375:13:4;;;;;;;3374:14;;3422:34;;;;-1:-1:-1;3440:12:4;;3455:1;3440:12;;;;:16;3422:34;3421:97;;;-1:-1:-1;3490:4:4;1746:19:7;:23;;;3462:55:4;;-1:-1:-1;3500:12:4;;;;;:17;3462:55;3421:97;3399:193;;;;-1:-1:-1;;;3399:193:4;;7901:2:40;3399:193:4;;;7883:21:40;7940:2;7920:18;;;7913:30;7979:34;7959:18;;;7952:62;-1:-1:-1;;;8030:18:40;;;8023:44;8084:19;;3399:193:4;;;;;;;;3603:12;:16;;-1:-1:-1;;3603:16:4;3618:1;3603:16;;;3630:67;;;;3665:13;:20;;-1:-1:-1;;3665:20:4;;;;;3630:67;-1:-1:-1;;;;;1298:19:32;::::1;1290:61;;;::::0;-1:-1:-1;;;1290:61:32;;10712:2:40;1290:61:32::1;::::0;::::1;10694:21:40::0;10751:2;10731:18;;;10724:30;10790:31;10770:18;;;10763:59;10839:18;;1290:61:32::1;;;;;;;;-1:-1:-1::0;;;;;1370:30:32;::::1;1362:83;;;::::0;-1:-1:-1;;;1362:83:32;;7492:2:40;1362:83:32::1;::::0;::::1;7474:21:40::0;7531:2;7511:18;;;7504:30;7570:34;7550:18;;;7543:62;-1:-1:-1;;;7621:18:40;;;7614:38;7669:19;;1362:83:32::1;;;;;;;;1458:4;:12:::0;;-1:-1:-1;;;;;;1458:12:32::1;-1:-1:-1::0;;;;;1458:12:32;;::::1;::::0;;;::::1;::::0;;;1481:15:::1;:34:::0;;-1:-1:-1;;;;;;1481:34:32::1;::::0;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;1528:24:::1;1539:4:::0;1545:6;1528:10:::1;:24::i;:::-;3723:14:4::0;3719:102;;;3754:13;:21;;-1:-1:-1;;3754:21:4;;;3795:14;;-1:-1:-1;5238:36:40;;3795:14:4;;5226:2:40;5211:18;3795:14:4;;;;;;;3719:102;1120:440:32;;;;;:::o;2146:495::-;1691:4;;-1:-1:-1;;;;;1691:4:32;736:10:8;1691:20:32;1683:64;;;;-1:-1:-1;;;1683:64:32;;;;;;;:::i;:::-;;;;;;;;;2422:24:::1;2511:13;3754:12:33::0;;3666:108;;2511:13:32::1;2457:15;::::0;2450:48:::1;::::0;-1:-1:-1;;;2450:48:32;;2492:4:::1;2450:48;::::0;::::1;4553:51:40::0;2501:6:32;;2457:15;;::::1;-1:-1:-1::0;;;;;2457:15:32::1;::::0;2450:33:::1;::::0;4526:18:40;;2450:48:32::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:57;;;;:::i;:::-;2449:75;;;;:::i;:::-;2422:102;;2537:19;2543:4;2549:6;2537:5;:19::i;:::-;2595:15;::::0;2567:66:::1;::::0;2595:15;;::::1;-1:-1:-1::0;;;;;2595:15:32::1;2612:2:::0;2616:16;2567:27:::1;:66::i;:::-;1758:1;2146:495:::0;;;:::o;5364:456:33:-;5504:4;5521:36;5531:6;5539:9;5550:6;5521:9;:36::i;:::-;-1:-1:-1;;;;;5597:19:33;;5570:24;5597:19;;;:11;:19;;;;;;;;736:10:8;5597:33:33;;;;;;;;5649:26;;;;5641:79;;;;-1:-1:-1;;;5641:79:33;;8316:2:40;5641:79:33;;;8298:21:40;8355:2;8335:18;;;8328:30;8394:34;8374:18;;;8367:62;-1:-1:-1;;;8445:18:40;;;8438:38;8493:19;;5641:79:33;;;;;;;;5731:57;5740:6;736:10:8;5762:25:33;5781:6;5762:16;:25;:::i;:::-;5731:8;:57::i;:::-;-1:-1:-1;5808:4:33;;5364:456;-1:-1:-1;;;;5364:456:33:o;3165:125:32:-;3215:5;3255:15;;;;;;;;;-1:-1:-1;;;;;3255:15:32;-1:-1:-1;;;;;3240:40:32;;:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3233:49;;3165:125;:::o;6229:215:33:-;736:10:8;6317:4:33;6366:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6366:34:33;;;;;;;;;;6317:4;;6334:80;;6357:7;;6366:47;;6403:10;;6366:47;:::i;:::-;6334:8;:80::i;:::-;-1:-1:-1;6432:4:33;6229:215;;;;:::o;1822:105:32:-;1691:4;;-1:-1:-1;;;;;1691:4:32;736:10:8;1691:20:32;1683:64;;;;-1:-1:-1;;;1683:64:32;;;;;;;:::i;:::-;;;;;;;;;1902:17:::1;1908:2;1912:6;1902:5;:17::i;:::-;1822:105:::0;;:::o;2378:125:33:-;2454:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2478:17:33;;;;:7;;:17;;;;;:::i;:::-;;2378:125;;:::o;2783:95::-;2830:13;2863:7;2856:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2783:95;:::o;1982:109:32:-;1691:4;;-1:-1:-1;;;;;1691:4:32;736:10:8;1691:20:32;1683:64;;;;-1:-1:-1;;;1683:64:32;;;;;;;:::i;:::-;;;;;;;;;2064:19:::1;2070:4;2076:6;2064:5;:19::i;:::-;1982:109:::0;;:::o;6947:377:33:-;736:10:8;7040:4:33;7084:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;7084:34:33;;;;;;;;;;7137:35;;;;7129:85;;;;-1:-1:-1;;;7129:85:33;;11070:2:40;7129:85:33;;;11052:21:40;11109:2;11089:18;;;11082:30;11148:34;11128:18;;;11121:62;-1:-1:-1;;;11199:18:40;;;11192:35;11244:19;;7129:85:33;;;;;;;;7225:67;736:10:8;7248:7:33;7257:34;7276:15;7257:16;:34;:::i;:::-;7225:8;:67::i;:::-;-1:-1:-1;7312:4:33;;6947:377;-1:-1:-1;;;6947:377:33:o;4177:175::-;4263:4;4280:42;736:10:8;4304:9:33;4315:6;4280:9;:42::i;:::-;-1:-1:-1;4340:4:33;4177:175;;;;:::o;10337:380::-;-1:-1:-1;;;;;10473:19:33;;10465:68;;;;-1:-1:-1;;;10465:68:33;;9533:2:40;10465:68:33;;;9515:21:40;9572:2;9552:18;;;9545:30;9611:34;9591:18;;;9584:62;-1:-1:-1;;;9662:18:40;;;9655:34;9706:19;;10465:68:33;;;;;;;;-1:-1:-1;;;;;10552:21:33;;10544:68;;;;-1:-1:-1;;;10544:68:33;;6682:2:40;10544:68:33;;;6664:21:40;6721:2;6701:18;;;6694:30;6760:34;6740:18;;;6733:62;-1:-1:-1;;;6811:18:40;;;6804:32;6853:19;;10544:68:33;;;;;;;;-1:-1:-1;;;;;10625:18:33;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10677:32;;11780:25:40;;;10677:32:33;;11753:18:40;10677:32:33;;;;;;;10337:380;;;:::o;9405:494::-;-1:-1:-1;;;;;9489:21:33;;9481:67;;;;-1:-1:-1;;;9481:67:33;;8725:2:40;9481:67:33;;;8707:21:40;8764:2;8744:18;;;8737:30;8803:34;8783:18;;;8776:62;-1:-1:-1;;;8854:18:40;;;8847:31;8895:19;;9481:67:33;;;;;;;;-1:-1:-1;;;;;9648:18:33;;9623:22;9648:18;;;;;;;;;;;9685:24;;;;9677:71;;;;-1:-1:-1;;;9677:71:33;;6279:2:40;9677:71:33;;;6261:21:40;6318:2;6298:18;;;6291:30;6357:34;6337:18;;;6330:62;-1:-1:-1;;;6408:18:40;;;6401:32;6450:19;;9677:71:33;;;;;;;;9780:23;9797:6;9780:14;:23;:::i;:::-;-1:-1:-1;;;;;9759:18:33;;:9;:18;;;;;;;;;;:44;;;;9814:12;:22;;9830:6;;9759:9;9814:22;;9830:6;;9814:22;:::i;:::-;;;;-1:-1:-1;;9854:37:33;;11780:25:40;;;9880:1:33;;-1:-1:-1;;;;;9854:37:33;;;;;11768:2:40;11753:18;9854:37:33;;;;;;;9405:494;;;:::o;671:449:30:-;903:45;;;-1:-1:-1;;;;;4807:32:40;;;903:45:30;;;4789:51:40;4856:18;;;;4849:34;;;903:45:30;;;;;;;;;;4762:18:40;;;;903:45:30;;;;;;;-1:-1:-1;;;;;903:45:30;-1:-1:-1;;;903:45:30;;;892:57;;-1:-1:-1;;;;892:10:30;;;;:57;;903:45;892:57;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;856:93;;;;982:7;:57;;;;-1:-1:-1;994:11:30;;:16;;:44;;;1025:4;1014:24;;;;;;;;;;;;:::i;:::-;994:44;982:57;960:152;;;;-1:-1:-1;;;960:152:30;;10298:2:40;960:152:30;;;10280:21:40;10337:2;10317:18;;;10310:30;10376:34;10356:18;;;10349:62;-1:-1:-1;;;10427:18:40;;;10420:43;10480:19;;960:152:30;;;;;;;;671:449;;;;;:::o;7814:638:33:-;-1:-1:-1;;;;;7954:20:33;;7946:70;;;;-1:-1:-1;;;7946:70:33;;9127:2:40;7946:70:33;;;9109:21:40;9166:2;9146:18;;;9139:30;9205:34;9185:18;;;9178:62;-1:-1:-1;;;9256:18:40;;;9249:35;9301:19;;7946:70:33;;;;;;;;-1:-1:-1;;;;;8035:23:33;;8027:71;;;;-1:-1:-1;;;8027:71:33;;5875:2:40;8027:71:33;;;5857:21:40;5914:2;5894:18;;;5887:30;5953:34;5933:18;;;5926:62;-1:-1:-1;;;6004:18:40;;;5997:33;6047:19;;8027:71:33;;;;;;;;-1:-1:-1;;;;;8195:17:33;;8171:21;8195:17;;;;;;;;;;;8231:23;;;;8223:74;;;;-1:-1:-1;;;8223:74:33;;7085:2:40;8223:74:33;;;7067:21:40;7124:2;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;-1:-1:-1;;;7214:18:40;;;7207:36;7260:19;;8223:74:33;;;;;;;;8328:22;8344:6;8328:13;:22;:::i;:::-;-1:-1:-1;;;;;8308:17:33;;;:9;:17;;;;;;;;;;;:42;;;;8361:20;;;;;;;;:30;;8385:6;;8308:9;8361:30;;8385:6;;8361:30;:::i;:::-;;;;;;;;8426:9;-1:-1:-1;;;;;8409:35:33;8418:6;-1:-1:-1;;;;;8409:35:33;;8437:6;8409:35;;;;11780:25:40;;11768:2;11753:18;;11735:76;8409:35:33;;;;;;;;7814:638;;;;:::o;8734:338::-;-1:-1:-1;;;;;8818:21:33;;8810:65;;;;-1:-1:-1;;;8810:65:33;;11476:2:40;8810:65:33;;;11458:21:40;11515:2;11495:18;;;11488:30;11554:33;11534:18;;;11527:61;11605:18;;8810:65:33;;;;;;;;8966:6;8950:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8983:18:33;;:9;:18;;;;;;;;;;:28;;9005:6;;8983:9;:28;;9005:6;;8983:28;:::i;:::-;;;;-1:-1:-1;;9027:37:33;;11780:25:40;;;-1:-1:-1;;;;;9027:37:33;;;9044:1;;9027:37;;11768:2:40;11753:18;9027:37:33;;;;;;;8734:338;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;14:173:40:-;82:20;;-1:-1:-1;;;;;131:31:40;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:739::-;;288:3;281:4;273:6;269:17;265:27;255:2;;310:5;303;296:20;255:2;350:6;337:20;376:18;413:2;409;406:10;403:2;;;419:18;;:::i;:::-;403:2;494;488:9;462:2;548:13;;-1:-1:-1;;544:22:40;;;568:2;540:31;536:40;524:53;;;592:18;;;612:22;;;589:46;586:2;;;638:18;;:::i;:::-;586:2;678:10;674:2;667:22;713:2;705:6;698:18;759:3;752:4;747:2;739:6;735:15;731:26;728:35;725:2;;;780:5;773;766:20;725:2;848;841:4;833:6;829:17;822:4;814:6;810:17;797:54;871:15;;;888:4;867:26;860:41;;;;-1:-1:-1;875:6:40;245:686;-1:-1:-1;;;245:686:40:o;936:196::-;;1048:2;1036:9;1027:7;1023:23;1019:32;1016:2;;;1069:6;1061;1054:22;1016:2;1097:29;1116:9;1097:29;:::i;:::-;1087:39;1006:126;-1:-1:-1;;;1006:126:40:o;1137:270::-;;;1266:2;1254:9;1245:7;1241:23;1237:32;1234:2;;;1287:6;1279;1272:22;1234:2;1315:29;1334:9;1315:29;:::i;:::-;1305:39;;1363:38;1397:2;1386:9;1382:18;1363:38;:::i;:::-;1353:48;;1224:183;;;;;:::o;1412:338::-;;;;1558:2;1546:9;1537:7;1533:23;1529:32;1526:2;;;1579:6;1571;1564:22;1526:2;1607:29;1626:9;1607:29;:::i;:::-;1597:39;;1655:38;1689:2;1678:9;1674:18;1655:38;:::i;:::-;1645:48;;1740:2;1729:9;1725:18;1712:32;1702:42;;1516:234;;;;;:::o;1755:264::-;;;1884:2;1872:9;1863:7;1859:23;1855:32;1852:2;;;1905:6;1897;1890:22;1852:2;1933:29;1952:9;1933:29;:::i;:::-;1923:39;2009:2;1994:18;;;;1981:32;;-1:-1:-1;;;1842:177:40:o;2024:297::-;;2144:2;2132:9;2123:7;2119:23;2115:32;2112:2;;;2165:6;2157;2150:22;2112:2;2202:9;2196:16;2255:5;2248:13;2241:21;2234:5;2231:32;2221:2;;2282:6;2274;2267:22;2221:2;2310:5;2102:219;-1:-1:-1;;;2102:219:40:o;2326:573::-;;;2475:2;2463:9;2454:7;2450:23;2446:32;2443:2;;;2496:6;2488;2481:22;2443:2;2541:9;2528:23;2570:18;2611:2;2603:6;2600:14;2597:2;;;2632:6;2624;2617:22;2597:2;2660:50;2702:7;2693:6;2682:9;2678:22;2660:50;:::i;:::-;2650:60;;2763:2;2752:9;2748:18;2735:32;2719:48;;2792:2;2782:8;2779:16;2776:2;;;2813:6;2805;2798:22;2776:2;;2841:52;2885:7;2874:8;2863:9;2859:24;2841:52;:::i;:::-;2831:62;;;2433:466;;;;;:::o;2904:722::-;;;;;3087:3;3075:9;3066:7;3062:23;3058:33;3055:2;;;3109:6;3101;3094:22;3055:2;3154:9;3141:23;3183:18;3224:2;3216:6;3213:14;3210:2;;;3245:6;3237;3230:22;3210:2;3273:50;3315:7;3306:6;3295:9;3291:22;3273:50;:::i;:::-;3263:60;;3376:2;3365:9;3361:18;3348:32;3332:48;;3405:2;3395:8;3392:16;3389:2;;;3426:6;3418;3411:22;3389:2;;3454:52;3498:7;3487:8;3476:9;3472:24;3454:52;:::i;:::-;3444:62;;;3525:38;3559:2;3548:9;3544:18;3525:38;:::i;:::-;3515:48;;3582:38;3616:2;3605:9;3601:18;3582:38;:::i;:::-;3572:48;;3045:581;;;;;;;:::o;3631:194::-;;3754:2;3742:9;3733:7;3729:23;3725:32;3722:2;;;3775:6;3767;3760:22;3722:2;-1:-1:-1;3803:16:40;;3712:113;-1:-1:-1;3712:113:40:o;3830:293::-;;3951:2;3939:9;3930:7;3926:23;3922:32;3919:2;;;3972:6;3964;3957:22;3919:2;4009:9;4003:16;4059:4;4052:5;4048:16;4041:5;4038:27;4028:2;;4084:6;4076;4069:22;4028:2;4112:5;3909:214;-1:-1:-1;;;3909:214:40:o;4128:274::-;;4295:6;4289:13;4311:53;4357:6;4352:3;4345:4;4337:6;4333:17;4311:53;:::i;:::-;4380:16;;;;;4265:137;-1:-1:-1;;4265:137:40:o;5285:383::-;;5434:2;5423:9;5416:21;5466:6;5460:13;5509:6;5504:2;5493:9;5489:18;5482:34;5525:66;5584:6;5579:2;5568:9;5564:18;5559:2;5551:6;5547:15;5525:66;:::i;:::-;5652:2;5631:15;-1:-1:-1;;5627:29:40;5612:45;;;;5659:2;5608:54;;5406:262;-1:-1:-1;;5406:262:40:o;9736:355::-;9938:2;9920:21;;;9977:2;9957:18;;;9950:30;10016:33;10011:2;9996:18;;9989:61;10082:2;10067:18;;9910:181::o;12005:128::-;;12076:1;12072:6;12069:1;12066:13;12063:2;;;12082:18;;:::i;:::-;12063:2;-1:-1:-1;12118:9:40;;12053:80::o;12138:217::-;;12204:1;12194:2;;-1:-1:-1;;;12229:31:40;;12283:4;12280:1;12273:15;12311:4;12236:1;12301:15;12194:2;-1:-1:-1;12340:9:40;;12184:171::o;12360:168::-;;12466:1;12462;12458:6;12454:14;12451:1;12448:21;12443:1;12436:9;12429:17;12425:45;12422:2;;;12473:18;;:::i;:::-;12422:2;-1:-1:-1;12513:9:40;;12412:116::o;12533:125::-;;12601:1;12598;12595:8;12592:2;;;12606:18;;:::i;:::-;12592:2;-1:-1:-1;12643:9:40;;12582:76::o;12663:258::-;12735:1;12745:113;12759:6;12756:1;12753:13;12745:113;;;12835:11;;;12829:18;12816:11;;;12809:39;12781:2;12774:10;12745:113;;;12876:6;12873:1;12870:13;12867:2;;;12911:1;12902:6;12897:3;12893:16;12886:27;12867:2;;12716:205;;;:::o;12926:380::-;13005:1;13001:12;;;;13048;;;13069:2;;13123:4;13115:6;13111:17;13101:27;;13069:2;13176;13168:6;13165:14;13145:18;13142:38;13139:2;;;13222:10;13217:3;13213:20;13210:1;13203:31;13257:4;13254:1;13247:15;13285:4;13282:1;13275:15;13139:2;;12981:325;;;:::o;13311:127::-;13372:10;13367:3;13363:20;13360:1;13353:31;13403:4;13400:1;13393:15;13427:4;13424:1;13417:15;13443:127;13504:10;13499:3;13495:20;13492:1;13485:31;13535:4;13532:1;13525:15;13559:4;13556:1;13549:15","constructor":{"id":"lib/tranche/contracts/Tranche.sol:Tranche:constructor","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","inputs":[]},"functions":[{"id":"lib/tranche/contracts/Tranche.sol:Tranche:allowance(address,address)(uint256)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"allowance(address,address):(uint256)","shortSignature":"dd62ed3e","name":"allowance","inputs":[{"name":"owner","kind":"Address","internalType":"address"},{"name":"spender","kind":"Address","internalType":"address"}],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:approve(address,uint256)(bool)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"approve(address,uint256):(bool)","shortSignature":"095ea7b3","name":"approve","inputs":[{"name":"spender","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:balanceOf(address)(uint256)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"balanceOf(address):(uint256)","shortSignature":"70a08231","name":"balanceOf","inputs":[{"name":"account","kind":"Address","internalType":"address"}],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:bond()(address)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"bond():(address)","shortSignature":"64c9ec6f","name":"bond","inputs":[],"outputs":[{"name":"","kind":"Address","internalType":"address"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:burn(address,uint256)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"burn(address,uint256)","shortSignature":"9dc29fac","name":"burn","inputs":[{"name":"from","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:collateralToken()(address)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"collateralToken():(address)","shortSignature":"b2016bd4","name":"collateralToken","inputs":[],"outputs":[{"name":"","kind":"Address","internalType":"address"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:decimals()(uint8)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"decimals():(uint8)","shortSignature":"313ce567","name":"decimals","inputs":[],"outputs":[{"name":"","kind":{"Uint":8},"internalType":"uint8"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:decreaseAllowance(address,uint256)(bool)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"decreaseAllowance(address,uint256):(bool)","shortSignature":"a457c2d7","name":"decreaseAllowance","inputs":[{"name":"spender","kind":"Address","internalType":"address"},{"name":"subtractedValue","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:increaseAllowance(address,uint256)(bool)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"increaseAllowance(address,uint256):(bool)","shortSignature":"39509351","name":"increaseAllowance","inputs":[{"name":"spender","kind":"Address","internalType":"address"},{"name":"addedValue","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:init(string,string,address,address)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"init(string,string,address,address)","shortSignature":"0e07f854","name":"init","inputs":[{"name":"name","kind":"String","internalType":"string"},{"name":"symbol","kind":"String","internalType":"string"},{"name":"_bond","kind":"Address","internalType":"address"},{"name":"_collateralToken","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:init(string,string)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"init(string,string)","shortSignature":"7029144c","name":"init","inputs":[{"name":"name_","kind":"String","internalType":"string"},{"name":"symbol_","kind":"String","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:mint(address,uint256)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"mint(address,uint256)","shortSignature":"40c10f19","name":"mint","inputs":[{"name":"to","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:name()(string)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"name():(string)","shortSignature":"06fdde03","name":"name","inputs":[],"outputs":[{"name":"","kind":"String","internalType":"string"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:redeem(address,address,uint256)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"redeem(address,address,uint256)","shortSignature":"0e6dfcd5","name":"redeem","inputs":[{"name":"from","kind":"Address","internalType":"address"},{"name":"to","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:symbol()(string)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"symbol():(string)","shortSignature":"95d89b41","name":"symbol","inputs":[],"outputs":[{"name":"","kind":"String","internalType":"string"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:totalSupply()(uint256)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"totalSupply():(uint256)","shortSignature":"18160ddd","name":"totalSupply","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:transfer(address,uint256)(bool)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"transfer(address,uint256):(bool)","shortSignature":"a9059cbb","name":"transfer","inputs":[{"name":"recipient","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/Tranche.sol:Tranche:transferFrom(address,address,uint256)(bool)","contractId":"lib/tranche/contracts/Tranche.sol:Tranche","signature":"transferFrom(address,address,uint256):(bool)","shortSignature":"23b872dd","name":"transferFrom","inputs":[{"name":"sender","kind":"Address","internalType":"address"},{"name":"recipient","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[]},{"name":"ERC20","artifactPath":"out/ERC20.sol/ERC20.json","sourcePath":"lib/tranche/contracts/external/ERC20.sol","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","sourceFileId":33,"sourceContent":"// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20 {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function init(string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n","sourceMap":"1362:10086:33:-:0;;;1941:116;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2008:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2032:17:33;;;;:7;;:17;;;;;:::i;:::-;;1941:116;;1362:10086;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1362:10086:33;;;-1:-1:-1;1362:10086:33;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;14:909:40:-;;121:3;114:4;106:6;102:17;98:27;88:2;;143:5;136;129:20;88:2;170:13;;-1:-1:-1;;;;;232:10:40;;;229:2;;;245:18;;:::i;:::-;229:2;320;314:9;288:2;374:13;;-1:-1:-1;;370:22:40;;;394:2;366:31;362:40;350:53;;;418:18;;;438:22;;;415:46;412:2;;;464:18;;:::i;:::-;412:2;504:10;500:2;493:22;539:2;531:6;524:18;561:4;551:14;;606:3;601:2;596;588:6;584:15;580:24;577:33;574:2;;;627:5;620;613:20;574:2;653:5;644:14;;667:133;681:2;678:1;675:9;667:133;;;769:14;;;765:23;;759:30;738:14;;;734:23;;727:63;692:10;;;;667:133;;;818:2;815:1;812:9;809:2;;;877:5;872:2;867;859:6;855:15;851:24;844:39;809:2;911:6;78:845;-1:-1:-1;;;;;;78:845:40:o;928:592::-;;;1088:2;1076:9;1067:7;1063:23;1059:32;1056:2;;;1109:6;1101;1094:22;1056:2;1141:16;;-1:-1:-1;;;;;1206:14:40;;;1203:2;;;1238:6;1230;1223:22;1203:2;1266:61;1319:7;1310:6;1299:9;1295:22;1266:61;:::i;:::-;1256:71;;1373:2;1362:9;1358:18;1352:25;1336:41;;1402:2;1392:8;1389:16;1386:2;;;1423:6;1415;1408:22;1386:2;;1451:63;1506:7;1495:8;1484:9;1480:24;1451:63;:::i;:::-;1441:73;;;1046:474;;;;;:::o;1525:380::-;1604:1;1600:12;;;;1647;;;1668:2;;1722:4;1714:6;1710:17;1700:27;;1668:2;1775;1767:6;1764:14;1744:18;1741:38;1738:2;;;1821:10;1816:3;1812:20;1809:1;1802:31;1856:4;1853:1;1846:15;1884:4;1881:1;1874:15;1738:2;;1580:325;;;:::o;1910:127::-;1971:10;1966:3;1962:20;1959:1;1952:31;2002:4;1999:1;1992:15;2026:4;2023:1;2016:15;1362:10086:33;;;;;;;","sourceMapDeployed":"1362:10086:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2573:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4713:169;;;;;;:::i;:::-;;:::i;:::-;;;2767:14:40;;2760:22;2742:41;;2730:2;2715:18;4713:169:33;;;;;;;3666:108;3754:12;;3666:108;;6388:25:40;;;6376:2;6361:18;3666:108:33;;;;;;;5364:456;;;;;;:::i;:::-;;:::i;:::-;;;2767:14:40;;2760:22;2742:41;;2730:2;2715:18;5364:456:33;;;;;;;3517:84;;;;3591:2;6566:36:40;;3517:84:33;;;;;;6554:2:40;3517:84:33;;;6229:215;;;;;;:::i;:::-;;:::i;:::-;;;2767:14:40;;2760:22;2742:41;;2730:2;2715:18;6229:215:33;;;;;;;2378:125;;;;;;:::i;:::-;;:::i;:::-;;3837:127;;;;;;:::i;:::-;-1:-1:-1;;;;;3938:18:33;3911:7;3938:18;;;;;;;;;;;;3837:127;;;;6388:25:40;;;6376:2;6361:18;3837:127:33;;;;;;;2783:95;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6947:377;;;;;;:::i;:::-;;:::i;:::-;;;2767:14:40;;2760:22;2742:41;;2730:2;2715:18;6947:377:33;;;;;;;4177:175;;;;;;:::i;:::-;;:::i;:::-;;;2767:14:40;;2760:22;2742:41;;2730:2;2715:18;4177:175:33;;;;;;;4415:151;;;;;;:::i;:::-;-1:-1:-1;;;;;4531:18:33;;;4504:7;4531:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4415:151;;;;6388:25:40;;;6376:2;6361:18;4415:151:33;;;;;;;2573:91;2618:13;2651:5;2644:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2573:91;:::o;4713:169::-;4796:4;4813:39;736:10:8;4836:7:33;4845:6;4813:8;:39::i;:::-;-1:-1:-1;4870:4:33;4713:169;;;;:::o;5364:456::-;5504:4;5521:36;5531:6;5539:9;5550:6;5521:9;:36::i;:::-;-1:-1:-1;;;;;5597:19:33;;5570:24;5597:19;;;:11;:19;;;;;;;;736:10:8;5597:33:33;;;;;;;;5649:26;;;;5641:79;;;;-1:-1:-1;;;5641:79:33;;4818:2:40;5641:79:33;;;4800:21:40;4857:2;4837:18;;;4830:30;4896:34;4876:18;;;4869:62;-1:-1:-1;;;4947:18:40;;;4940:38;4995:19;;5641:79:33;;;;;;;;5731:57;5740:6;736:10:8;5762:25:33;5781:6;5762:16;:25;:::i;:::-;5731:8;:57::i;:::-;-1:-1:-1;5808:4:33;;5364:456;-1:-1:-1;;;;5364:456:33:o;6229:215::-;736:10:8;6317:4:33;6366:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;6366:34:33;;;;;;;;;;6317:4;;6334:80;;6357:7;;6366:47;;6403:10;;6366:47;:::i;:::-;6334:8;:80::i;:::-;-1:-1:-1;6432:4:33;6229:215;;;;:::o;2378:125::-;2454:13;;;;:5;;:13;;;;;:::i;:::-;-1:-1:-1;2478:17:33;;;;:7;;:17;;;;;:::i;:::-;;2378:125;;:::o;2783:95::-;2830:13;2863:7;2856:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2783:95;:::o;6947:377::-;736:10:8;7040:4:33;7084:25;;;:11;:25;;;;;;;;-1:-1:-1;;;;;7084:34:33;;;;;;;;;;7137:35;;;;7129:85;;;;-1:-1:-1;;;7129:85:33;;6038:2:40;7129:85:33;;;6020:21:40;6077:2;6057:18;;;6050:30;6116:34;6096:18;;;6089:62;-1:-1:-1;;;6167:18:40;;;6160:35;6212:19;;7129:85:33;;;;;;;;7225:67;736:10:8;7248:7:33;7257:34;7276:15;7257:16;:34;:::i;:::-;7225:8;:67::i;:::-;-1:-1:-1;7312:4:33;;6947:377;-1:-1:-1;;;6947:377:33:o;4177:175::-;4263:4;4280:42;736:10:8;4304:9:33;4315:6;4280:9;:42::i;:::-;-1:-1:-1;4340:4:33;4177:175;;;;:::o;10337:380::-;-1:-1:-1;;;;;10473:19:33;;10465:68;;;;-1:-1:-1;;;10465:68:33;;5633:2:40;10465:68:33;;;5615:21:40;5672:2;5652:18;;;5645:30;5711:34;5691:18;;;5684:62;-1:-1:-1;;;5762:18:40;;;5755:34;5806:19;;10465:68:33;;;;;;;;-1:-1:-1;;;;;10552:21:33;;10544:68;;;;-1:-1:-1;;;10544:68:33;;4008:2:40;10544:68:33;;;3990:21:40;4047:2;4027:18;;;4020:30;4086:34;4066:18;;;4059:62;-1:-1:-1;;;4137:18:40;;;4130:32;4179:19;;10544:68:33;;;;;;;;-1:-1:-1;;;;;10625:18:33;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10677:32;;6388:25:40;;;10677:32:33;;6361:18:40;10677:32:33;;;;;;;10337:380;;;:::o;7814:638::-;-1:-1:-1;;;;;7954:20:33;;7946:70;;;;-1:-1:-1;;;7946:70:33;;5227:2:40;7946:70:33;;;5209:21:40;5266:2;5246:18;;;5239:30;5305:34;5285:18;;;5278:62;-1:-1:-1;;;5356:18:40;;;5349:35;5401:19;;7946:70:33;;;;;;;;-1:-1:-1;;;;;8035:23:33;;8027:71;;;;-1:-1:-1;;;8027:71:33;;3604:2:40;8027:71:33;;;3586:21:40;3643:2;3623:18;;;3616:30;3682:34;3662:18;;;3655:62;-1:-1:-1;;;3733:18:40;;;3726:33;3776:19;;8027:71:33;;;;;;;;-1:-1:-1;;;;;8195:17:33;;8171:21;8195:17;;;;;;;;;;;8231:23;;;;8223:74;;;;-1:-1:-1;;;8223:74:33;;4411:2:40;8223:74:33;;;4393:21:40;4450:2;4430:18;;;4423:30;4489:34;4469:18;;;4462:62;-1:-1:-1;;;4540:18:40;;;4533:36;4586:19;;8223:74:33;;;;;;;;8328:22;8344:6;8328:13;:22;:::i;:::-;-1:-1:-1;;;;;8308:17:33;;;:9;:17;;;;;;;;;;;:42;;;;8361:20;;;;;;;;:30;;8385:6;;8308:9;8361:30;;8385:6;;8361:30;:::i;:::-;;;;;;;;8426:9;-1:-1:-1;;;;;8409:35:33;8418:6;-1:-1:-1;;;;;8409:35:33;;8437:6;8409:35;;;;6388:25:40;;6376:2;6361:18;;6343:76;8409:35:33;;;;;;;;7814:638;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;:::o;14:173:40:-;82:20;;-1:-1:-1;;;;;131:31:40;;121:42;;111:2;;177:1;174;167:12;111:2;63:124;;;:::o;192:739::-;;288:3;281:4;273:6;269:17;265:27;255:2;;310:5;303;296:20;255:2;350:6;337:20;376:18;413:2;409;406:10;403:2;;;419:18;;:::i;:::-;403:2;494;488:9;462:2;548:13;;-1:-1:-1;;544:22:40;;;568:2;540:31;536:40;524:53;;;592:18;;;612:22;;;589:46;586:2;;;638:18;;:::i;:::-;586:2;678:10;674:2;667:22;713:2;705:6;698:18;759:3;752:4;747:2;739:6;735:15;731:26;728:35;725:2;;;780:5;773;766:20;725:2;848;841:4;833:6;829:17;822:4;814:6;810:17;797:54;871:15;;;888:4;867:26;860:41;;;;-1:-1:-1;875:6:40;245:686;-1:-1:-1;;;245:686:40:o;936:196::-;;1048:2;1036:9;1027:7;1023:23;1019:32;1016:2;;;1069:6;1061;1054:22;1016:2;1097:29;1116:9;1097:29;:::i;:::-;1087:39;1006:126;-1:-1:-1;;;1006:126:40:o;1137:270::-;;;1266:2;1254:9;1245:7;1241:23;1237:32;1234:2;;;1287:6;1279;1272:22;1234:2;1315:29;1334:9;1315:29;:::i;:::-;1305:39;;1363:38;1397:2;1386:9;1382:18;1363:38;:::i;:::-;1353:48;;1224:183;;;;;:::o;1412:338::-;;;;1558:2;1546:9;1537:7;1533:23;1529:32;1526:2;;;1579:6;1571;1564:22;1526:2;1607:29;1626:9;1607:29;:::i;:::-;1597:39;;1655:38;1689:2;1678:9;1674:18;1655:38;:::i;:::-;1645:48;;1740:2;1729:9;1725:18;1712:32;1702:42;;1516:234;;;;;:::o;1755:264::-;;;1884:2;1872:9;1863:7;1859:23;1855:32;1852:2;;;1905:6;1897;1890:22;1852:2;1933:29;1952:9;1933:29;:::i;:::-;1923:39;2009:2;1994:18;;;;1981:32;;-1:-1:-1;;;1842:177:40:o;2024:573::-;;;2173:2;2161:9;2152:7;2148:23;2144:32;2141:2;;;2194:6;2186;2179:22;2141:2;2239:9;2226:23;2268:18;2309:2;2301:6;2298:14;2295:2;;;2330:6;2322;2315:22;2295:2;2358:50;2400:7;2391:6;2380:9;2376:22;2358:50;:::i;:::-;2348:60;;2461:2;2450:9;2446:18;2433:32;2417:48;;2490:2;2480:8;2477:16;2474:2;;;2511:6;2503;2496:22;2474:2;;2539:52;2583:7;2572:8;2561:9;2557:24;2539:52;:::i;:::-;2529:62;;;2131:466;;;;;:::o;2794:603::-;;2935:2;2964;2953:9;2946:21;2996:6;2990:13;3039:6;3034:2;3023:9;3019:18;3012:34;3064:4;3077:140;3091:6;3088:1;3085:13;3077:140;;;3186:14;;;3182:23;;3176:30;3152:17;;;3171:2;3148:26;3141:66;3106:10;;3077:140;;;3235:6;3232:1;3229:13;3226:2;;;3305:4;3300:2;3291:6;3280:9;3276:22;3272:31;3265:45;3226:2;-1:-1:-1;3381:2:40;3360:15;-1:-1:-1;;3356:29:40;3341:45;;;;3388:2;3337:54;;2915:482;-1:-1:-1;;;2915:482:40:o;6613:128::-;;6684:1;6680:6;6677:1;6674:13;6671:2;;;6690:18;;:::i;:::-;6671:2;-1:-1:-1;6726:9:40;;6661:80::o;6746:125::-;;6814:1;6811;6808:8;6805:2;;;6819:18;;:::i;:::-;6805:2;-1:-1:-1;6856:9:40;;6795:76::o;6876:380::-;6955:1;6951:12;;;;6998;;;7019:2;;7073:4;7065:6;7061:17;7051:27;;7019:2;7126;7118:6;7115:14;7095:18;7092:38;7089:2;;;7172:10;7167:3;7163:20;7160:1;7153:31;7207:4;7204:1;7197:15;7235:4;7232:1;7225:15;7089:2;;6931:325;;;:::o;7261:127::-;7322:10;7317:3;7313:20;7310:1;7303:31;7353:4;7350:1;7343:15;7377:4;7374:1;7367:15;7393:127;7454:10;7449:3;7445:20;7442:1;7435:31;7485:4;7482:1;7475:15;7509:4;7506:1;7499:15","constructor":{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:constructor","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","inputs":[{"name":"name_","kind":"String","internalType":"string"},{"name":"symbol_","kind":"String","internalType":"string"}]},"functions":[{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:allowance(address,address)(uint256)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"allowance(address,address):(uint256)","shortSignature":"dd62ed3e","name":"allowance","inputs":[{"name":"owner","kind":"Address","internalType":"address"},{"name":"spender","kind":"Address","internalType":"address"}],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:approve(address,uint256)(bool)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"approve(address,uint256):(bool)","shortSignature":"095ea7b3","name":"approve","inputs":[{"name":"spender","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:balanceOf(address)(uint256)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"balanceOf(address):(uint256)","shortSignature":"70a08231","name":"balanceOf","inputs":[{"name":"account","kind":"Address","internalType":"address"}],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:decimals()(uint8)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"decimals():(uint8)","shortSignature":"313ce567","name":"decimals","inputs":[],"outputs":[{"name":"","kind":{"Uint":8},"internalType":"uint8"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:decreaseAllowance(address,uint256)(bool)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"decreaseAllowance(address,uint256):(bool)","shortSignature":"a457c2d7","name":"decreaseAllowance","inputs":[{"name":"spender","kind":"Address","internalType":"address"},{"name":"subtractedValue","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:increaseAllowance(address,uint256)(bool)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"increaseAllowance(address,uint256):(bool)","shortSignature":"39509351","name":"increaseAllowance","inputs":[{"name":"spender","kind":"Address","internalType":"address"},{"name":"addedValue","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:init(string,string)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"init(string,string)","shortSignature":"7029144c","name":"init","inputs":[{"name":"name_","kind":"String","internalType":"string"},{"name":"symbol_","kind":"String","internalType":"string"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:name()(string)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"name():(string)","shortSignature":"06fdde03","name":"name","inputs":[],"outputs":[{"name":"","kind":"String","internalType":"string"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:symbol()(string)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"symbol():(string)","shortSignature":"95d89b41","name":"symbol","inputs":[],"outputs":[{"name":"","kind":"String","internalType":"string"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:totalSupply()(uint256)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"totalSupply():(uint256)","shortSignature":"18160ddd","name":"totalSupply","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:transfer(address,uint256)(bool)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"transfer(address,uint256):(bool)","shortSignature":"a9059cbb","name":"transfer","inputs":[{"name":"recipient","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"lib/tranche/contracts/external/ERC20.sol:ERC20:transferFrom(address,address,uint256)(bool)","contractId":"lib/tranche/contracts/external/ERC20.sol:ERC20","signature":"transferFrom(address,address,uint256):(bool)","shortSignature":"23b872dd","name":"transferFrom","inputs":[{"name":"sender","kind":"Address","internalType":"address"},{"name":"recipient","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[]},{"name":"Counter","artifactPath":"out/Counter.sol/Counter.json","sourcePath":"src/Counter.sol","contractId":"src/Counter.sol:Counter","sourceFileId":38,"sourceContent":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\ncontract Counter {\n    uint256 public number;\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n    }\n\n    function increment() public {\n        number++;\n    }\n}\n","sourceMap":"64:192:38:-:0;;;;;;;;;;;;;;;;;;;","sourceMapDeployed":"64:192:38:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;115:80;;;;;;:::i;:::-;170:6;:18;115:80;;;87:21;;;;;;;;;355:25:40;;;343:2;328:18;87:21:38;;;;;;;201:53;;;:::i;:::-;;;239:6;:8;;;:6;:8;;;:::i;:::-;;;;;;201:53::o;14:190:40:-;;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;-1:-1:-1;175:23:40;;84:120;-1:-1:-1;84:120:40:o;391:236::-;;-1:-1:-1;;451:17:40;;448:2;;;-1:-1:-1;;;491:33:40;;547:4;544:1;537:15;577:4;491:33;565:17;448:2;-1:-1:-1;619:1:40;608:13;;438:189::o","constructor":null,"functions":[{"id":"src/Counter.sol:Counter:increment()","contractId":"src/Counter.sol:Counter","signature":"increment()","shortSignature":"d09de08a","name":"increment","inputs":[],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"src/Counter.sol:Counter:number()(uint256)","contractId":"src/Counter.sol:Counter","signature":"number():(uint256)","shortSignature":"8381f58a","name":"number","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"src/Counter.sol:Counter:setNumber(uint256)","contractId":"src/Counter.sol:Counter","signature":"setNumber(uint256)","shortSignature":"3fb5c1cb","name":"setNumber","inputs":[{"name":"newNumber","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[4,5,7,8,11,12]},{"name":"BondControllerTest","artifactPath":"out/BondController.t.sol/BondControllerTest.json","sourcePath":"test/pnm/BondController.t.sol","contractId":"test/pnm/BondController.t.sol:BondControllerTest","sourceFileId":39,"sourceContent":"// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.3;\n\nimport \"@pwnednomore/contracts/PTest.sol\";\nimport \"forge-std/StdInvariant.sol\";\nimport \"tranche/BondController.sol\";\nimport {Tranche} from \"tranche/Tranche.sol\";\nimport \"../../src/Counter.sol\";\n\ncontract BondControllerTest is PTest {\n    uint256 forkId;\n    Counter counter;\n\n    Tranche tranche = Tranche(0xa07Df4a1721bF151104234A8B73B93e5E371f7e8);\n    BondController bondController =\n        BondController(0x8c624D6a336edE5da3bDA01574cF091A938EA906);\n\n    address USER = address(0x1);\n    address agent;\n\n    function setUp() external {\n        forkId = vm.createSelectFork(vm.rpcUrl(\"mainnet\"), 16833213);\n\n        counter = new Counter();\n        // targetContract(address(tranche));\n        // targetContract(address(bondController));\n\n        agent = getAgent();\n        hoax(agent, 1 ether);\n    }\n\n    // Invariants:\n    // - `totalDebt` should always equal the sum of all tranche tokens' `totalSupply()`\n    function invariantTotalDebt() external view {\n        assert(bondController.totalDebt() == tranche.totalSupply());\n    }\n}\n","sourceMap":"259:846:39:-:0;;;1572:26:13;;;-1:-1:-1;;1572:26:13;;;1594:4;1572:26;;;;;;3288:44:17;;;;;;;;;758:28:15;;;;;;;;;;344:69:39;;;-1:-1:-1;;;;;;344:69:39;;;370:42;344:69;;;;419:98;;;;;474:42;419:98;;;524:27;;;;;;;;;;;259:846;;;;;;;;;;;;;;;;","sourceMapDeployed":"259:846:39:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;590:106:11;;;;;;:::i;:::-;;:::i;:::-;;577:293:39;;;:::i;:::-;;983:120;;;:::i;:::-;;1170:107:11;;;;;;:::i;:::-;;:::i;:::-;;2161:134:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2930:133;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;884:105:11;;;;;;:::i;:::-;;:::i;:::-;;2631:141:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2447:178;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2301:140;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1059:62:11;;;:::i;:::-;;277:47;;206:64;277:47;;;;;-1:-1:-1;;;;;8095:32:40;;;8077:51;;8065:2;8050:18;277:47:11;;;;;;;2778:146:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;396:82:11;;;;;;:::i;:::-;;:::i;:::-;;1866:141:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1819:584:13;;;:::i;:::-;;;7891:14:40;;7884:22;7866:41;;7854:2;7839:18;1819:584:13;;;;;;;353:94:10;220:22;353:94;;8931:25:40;;;8919:2;8904:18;353:94:10;;;;;;;798:81:11;;;;;;:::i;:::-;;:::i;:::-;;2013:142:20;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;758:28:15;;;;;;;;;;;;7891:14:40;;7884:22;7866:41;;7854:2;7839:18;758:28:15;;;;;;;1572:26:13;;;;;;;;;;;;7891:14:40;;7884:22;7866:41;;7854:2;7839:18;1572:26:13;;;;;;;590:106:11;667:22;;-1:-1:-1;;;667:22:11;;-1:-1:-1;;;;;4061:15:40;;;667:22:11;;;4043:34:40;4113:15;;4093:18;;;4086:43;667:8:11;;;;3978:18:40;;667:22:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;590:106;;:::o;577:293:39:-;642:20;;-1:-1:-1;;;642:20:39;;8652:2:40;642:20:39;;;8634:21:40;8691:1;8671:18;;;8664:29;-1:-1:-1;;;8709:18:40;;;8702:37;622:19:39;;;;;;642:9;;8756:18:40;;642:20:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;642:20:39;;;;;;;;;;;;:::i;:::-;664:8;622:51;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;613:6;:60;694:13;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;684:7:39;:23;;-1:-1:-1;;;;;;684:23:39;-1:-1:-1;;;;;684:23:39;;;;;;;;;;823:10;:8;:10::i;:::-;815:5;:18;;-1:-1:-1;;;;;;815:18:39;-1:-1:-1;;;;;815:18:39;;;;;;;;;843:20;;855:7;843:4;:20::i;:::-;577:293::o;983:120::-;1074:7;;;;;;;;;-1:-1:-1;;;;;1074:7:39;-1:-1:-1;;;;;1074:19:39;;:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1044:14;;;;;;;;;-1:-1:-1;;;;;1044:14:39;-1:-1:-1;;;;;1044:24:39;;:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:51;1037:59;;-1:-1:-1;;;1037:59:39;;;;;;;;;983:120::o;1170:107:11:-;1246:24;;-1:-1:-1;;;1246:24:11;;-1:-1:-1;;;;;4611:32:40;;1246:24:11;;;4593:51:40;4660:18;;;4653:34;;;1246:7:11;;;;4566:18:40;;1246:24:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1170:107;;:::o;2161:134:20:-;2208:33;2272:16;2253:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2253:35:20;;;;;;;;;;;;;;;;;;;;;;;2161:134;:::o;2930:133::-;2976:33;3040:16;3021:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3021:35:20;;;;;;;;;;;;;;;;;;;;;;;2930:133;:::o;884:105:11:-;955:27;;-1:-1:-1;;;955:27:11;;-1:-1:-1;;;;;4061:15:40;;;955:27:11;;;4043:34:40;4113:15;;4093:18;;;4086:43;955:13:11;;;;3978:18:40;;955:27:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;884:105;;:::o;2631:141:20:-;2679:35;2747:18;2726:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2726:39:20;;;;;;;;;;;;;;;;;;;;;;;2631:141;:::o;2447:178::-;2503:48;2592:26;2563:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2563:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2563:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2447:178;:::o;2301:140::-;2349:34;2416:18;2395:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2301:140;:::o;1059:62:11:-;317:28:14;309:37;;-1:-1:-1;;;;;1100:12:11;;:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1059:62::o;2778:146:20:-;2826:40;2899:18;2878:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:39:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2878:39:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2778:146;:::o;396:82:11:-;457:14;;-1:-1:-1;;;457:14:11;;-1:-1:-1;;;;;3787:32:40;;457:14:11;;;3769:51:40;457:8:11;;;;3742:18:40;;457:14:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;396:82;:::o;1866:141:20:-;1915:34;1982:18;1961:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1866:141;:::o;1819:584:13:-;1853:4;1873:7;;;;;;;1869:528;;;-1:-1:-1;1903:7:13;;;;;;;1896:14;;1869:528;1941:17;2990:42;2978:55;3059:16;1980:374;;2196:43;;;1671:64;2196:43;;;4314:51:40;;;-1:-1:-1;;;4381:18:40;;;4374:34;2196:43:13;;;;;;;;;4287:18:40;;;2196:43:13;;;-1:-1:-1;;1671:64:13;;2086:175;;2135:34;;2086:175;;;:::i;:::-;;;;-1:-1:-1;;2086:175:13;;;;;;;;;;2047:232;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2020:259;;;2323:7;2312:27;;;;;;;;;;;;:::i;:::-;2297:42;;1980:374;;2374:12;-1:-1:-1;1819:584:13;;:::o;798:81:11:-;853:19;;-1:-1:-1;;;853:19:11;;-1:-1:-1;;;;;3787:32:40;;853:19:11;;;3769:51:40;853:13:11;;;;3742:18:40;;853:19:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;798:81;:::o;2013:142:20:-;2062:35;2130:18;2109:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2109:39:20;;;;;;;;;;;;;;;;;;;;;;;2013:142;:::o;250:97:10:-;314:26;;-1:-1:-1;;;;;;314:26:10;;220:22;314:26;;;8931:25:40;288:7:10;;314;;;;8904:18:40;;314:26:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;307:33;;250:97;:::o;18192:134:18:-;18266:24;;-1:-1:-1;;;18266:24:18;;-1:-1:-1;;;;;4611:32:40;;18266:24:18;;;4593:51:40;4660:18;;;4653:34;;;18266:7:18;;;;4566:18:40;;18266:24:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;18300:19:18;;-1:-1:-1;;;18300:19:18;;-1:-1:-1;;;;;3787:32:40;;18300:19:18;;;3769:51:40;18300:8:18;;-1:-1:-1;18300:8:18;;-1:-1:-1;3742:18:40;;18300:19:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18192:134;;:::o;-1:-1:-1:-;;;;;;;;:::o;14:257:40:-;;126:2;114:9;105:7;101:23;97:32;94:2;;;147:6;139;132:22;94:2;191:9;178:23;210:31;235:5;210:31;:::i;:::-;260:5;84:187;-1:-1:-1;;;84:187:40:o;276:261::-;;399:2;387:9;378:7;374:23;370:32;367:2;;;420:6;412;405:22;367:2;457:9;451:16;476:31;501:5;476:31;:::i;:::-;526:5;357:180;-1:-1:-1;;;357:180:40:o;542:398::-;;;671:2;659:9;650:7;646:23;642:32;639:2;;;692:6;684;677:22;639:2;736:9;723:23;755:31;780:5;755:31;:::i;:::-;805:5;-1:-1:-1;862:2:40;847:18;;834:32;875:33;834:32;875:33;:::i;:::-;927:7;917:17;;;629:311;;;;;:::o;945:325::-;;;1074:2;1062:9;1053:7;1049:23;1045:32;1042:2;;;1095:6;1087;1080:22;1042:2;1139:9;1126:23;1158:31;1183:5;1158:31;:::i;:::-;1208:5;1260:2;1245:18;;;;1232:32;;-1:-1:-1;;;1032:238:40:o;1275:297::-;;1395:2;1383:9;1374:7;1370:23;1366:32;1363:2;;;1416:6;1408;1401:22;1363:2;1453:9;1447:16;1506:5;1499:13;1492:21;1485:5;1482:32;1472:2;;1533:6;1525;1518:22;1472:2;1561:5;1353:219;-1:-1:-1;;;1353:219:40:o;1577:924::-;;1710:2;1698:9;1689:7;1685:23;1681:32;1678:2;;;1731:6;1723;1716:22;1678:2;1769:9;1763:16;1798:18;1839:2;1831:6;1828:14;1825:2;;;1860:6;1852;1845:22;1825:2;1903:6;1892:9;1888:22;1878:32;;1948:7;1941:4;1937:2;1933:13;1929:27;1919:2;;1975:6;1967;1960:22;1919:2;2009;2003:9;2031:2;2027;2024:10;2021:2;;;2037:18;;:::i;:::-;2021:2;2112;2106:9;2080:2;2166:13;;-1:-1:-1;;2162:22:40;;;2186:2;2158:31;2154:40;2142:53;;;2210:18;;;2230:22;;;2207:46;2204:2;;;2256:18;;:::i;:::-;2204:2;2296:10;2292:2;2285:22;2331:2;2323:6;2316:18;2371:7;2366:2;2361;2357;2353:11;2349:20;2346:33;2343:2;;;2397:6;2389;2382:22;2343:2;2415:55;2467:2;2462;2454:6;2450:15;2445:2;2441;2437:11;2415:55;:::i;:::-;2489:6;1668:833;-1:-1:-1;;;;;;;1668:833:40:o;2506:194::-;;2629:2;2617:9;2608:7;2604:23;2600:32;2597:2;;;2650:6;2642;2635:22;2597:2;-1:-1:-1;2678:16:40;;2587:113;-1:-1:-1;2587:113:40:o;2705:258::-;;2785:5;2779:12;2812:6;2807:3;2800:19;2828:63;2884:6;2877:4;2872:3;2868:14;2861:4;2854:5;2850:16;2828:63;:::i;:::-;2945:2;2924:15;-1:-1:-1;;2920:29:40;2911:39;;;;2952:4;2907:50;;2755:208;-1:-1:-1;;2755:208:40:o;2968:371::-;-1:-1:-1;;;;;;3153:33:40;;3141:46;;3210:13;;2968:371;;3232:61;3210:13;3282:1;3273:11;;3266:4;3254:17;;3232:61;:::i;:::-;3313:16;;;;3331:1;3309:24;;3131:208;-1:-1:-1;;;3131:208:40:o;3344:274::-;;3511:6;3505:13;3527:53;3573:6;3568:3;3561:4;3553:6;3549:17;3527:53;:::i;:::-;3596:16;;;;;3481:137;-1:-1:-1;;3481:137:40:o;4698:661::-;4869:2;4921:21;;;4991:13;;4894:18;;;5013:22;;;4698:661;;4869:2;5092:15;;;;5066:2;5051:18;;;4698:661;5138:195;5152:6;5149:1;5146:13;5138:195;;;5217:13;;-1:-1:-1;;;;;5213:39:40;5201:52;;5308:15;;;;5273:12;;;;5249:1;5167:9;5138:195;;;-1:-1:-1;5350:3:40;;4849:510;-1:-1:-1;;;;;;4849:510:40:o;5364:806::-;;5555:2;5595;5584:9;5580:18;5625:2;5614:9;5607:21;5648:6;5683;5677:13;5714:6;5706;5699:22;5752:2;5741:9;5737:18;5730:25;;5814:2;5804:6;5801:1;5797:14;5786:9;5782:30;5778:39;5764:53;;5852:2;5844:6;5840:15;5873:4;5886:255;5900:6;5897:1;5894:13;5886:255;;;5993:2;5989:7;5977:9;5969:6;5965:22;5961:36;5956:3;5949:49;6021:40;6054:6;6045;6039:13;6021:40;:::i;:::-;6011:50;-1:-1:-1;6119:12:40;;;;6084:15;;;;5922:1;5915:9;5886:255;;;-1:-1:-1;6158:6:40;;5535:635;-1:-1:-1;;;;;;;5535:635:40:o;6175:1546::-;;6406:2;6446;6435:9;6431:18;6476:2;6465:9;6458:21;6499:6;6534;6528:13;6565:6;6557;6550:22;6591:2;6581:12;;6624:2;6613:9;6609:18;6602:25;;6686:2;6676:6;6673:1;6669:14;6658:9;6654:30;6650:39;6724:2;6716:6;6712:15;6745:4;6758:934;6772:6;6769:1;6766:13;6758:934;;;6837:22;;;-1:-1:-1;;6833:36:40;6821:49;;6893:13;;6980:9;;-1:-1:-1;;;;;6976:35:40;6961:51;;7051:11;;7045:18;7083:15;;;7076:27;;;7164:19;;6933:15;;;7196:24;;;7286:21;;;;7331:4;;7254:2;7242:15;;;7348:236;7364:8;7359:3;7356:17;7348:236;;;7445:15;;-1:-1:-1;;;;;;7441:42:40;7427:57;;7553:17;;;;7392:1;7383:11;;;;;7510:14;;;;7348:236;;;-1:-1:-1;7670:12:40;;;;7607:5;-1:-1:-1;;;7635:15:40;;;;6794:1;6787:9;6758:934;;;-1:-1:-1;7709:6:40;;6386:1335;-1:-1:-1;;;;;;;;6386:1335:40:o;8139:306::-;;8331:2;8320:9;8313:21;8351:45;8392:2;8381:9;8377:18;8369:6;8351:45;:::i;:::-;8343:53;;8432:6;8427:2;8416:9;8412:18;8405:34;8303:142;;;;;:::o;8967:258::-;9039:1;9049:113;9063:6;9060:1;9057:13;9049:113;;;9139:11;;;9133:18;9120:11;;;9113:39;9085:2;9078:10;9049:113;;;9180:6;9177:1;9174:13;9171:2;;;9215:1;9206:6;9201:3;9197:16;9190:27;9171:2;;9020:205;;;:::o;9230:380::-;9309:1;9305:12;;;;9352;;;9373:2;;9427:4;9419:6;9415:17;9405:27;;9373:2;9480;9472:6;9469:14;9449:18;9446:38;9443:2;;;9526:10;9521:3;9517:20;9514:1;9507:31;9561:4;9558:1;9551:15;9589:4;9586:1;9579:15;9443:2;;9285:325;;;:::o;9615:127::-;9676:10;9671:3;9667:20;9664:1;9657:31;9707:4;9704:1;9697:15;9731:4;9728:1;9721:15;9747:131;-1:-1:-1;;;;;9822:31:40;;9812:42;;9802:2;;9868:1;9865;9858:12;9802:2;9792:86;:::o","constructor":null,"functions":[{"id":"test/pnm/BondController.t.sol:BondControllerTest:IS_SCRIPT()(bool)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"IS_SCRIPT():(bool)","shortSignature":"f8ccbf47","name":"IS_SCRIPT","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:IS_TEST()(bool)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"IS_TEST():(bool)","shortSignature":"fa7626d4","name":"IS_TEST","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:asAccountBegin(address,address)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"asAccountBegin(address,address)","shortSignature":"3eb644f6","name":"asAccountBegin","inputs":[{"name":"addr","kind":"Address","internalType":"address"},{"name":"origin","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:asAccountBegin(address)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"asAccountBegin(address)","shortSignature":"d8fdc41d","name":"asAccountBegin","inputs":[{"name":"addr","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:asAccountEnd()","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"asAccountEnd()","shortSignature":"8667f1bb","name":"asAccountEnd","inputs":[],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:asAccountForNextCall(address,address)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"asAccountForNextCall(address,address)","shortSignature":"03c70e04","name":"asAccountForNextCall","inputs":[{"name":"addr","kind":"Address","internalType":"address"},{"name":"origin","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:asAccountForNextCall(address)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"asAccountForNextCall(address)","shortSignature":"9d7f502f","name":"asAccountForNextCall","inputs":[{"name":"addr","kind":"Address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:excludeArtifacts()(string[])","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"excludeArtifacts():(string[])","shortSignature":"b5508aa9","name":"excludeArtifacts","inputs":[],"outputs":[{"name":"excludedArtifacts_","kind":{"Array":"String"},"internalType":"string[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:excludeContracts()(address[])","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"excludeContracts():(address[])","shortSignature":"e20c9f71","name":"excludeContracts","inputs":[],"outputs":[{"name":"excludedContracts_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:excludeSenders()(address[])","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"excludeSenders():(address[])","shortSignature":"1ed7831c","name":"excludeSenders","inputs":[],"outputs":[{"name":"excludedSenders_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:failed()(bool)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"failed():(bool)","shortSignature":"ba414fa6","name":"failed","inputs":[],"outputs":[{"name":"","kind":"Bool","internalType":"bool"}],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:getAgentKey()(uint256)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"getAgentKey():(uint256)","shortSignature":"ce670b30","name":"getAgentKey","inputs":[],"outputs":[{"name":"","kind":{"Uint":256},"internalType":"uint256"}],"stateMutability":"pure","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:invariantTotalDebt()","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"invariantTotalDebt()","shortSignature":"16c840ce","name":"invariantTotalDebt","inputs":[],"outputs":[],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":true,"isInvariant":true,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:setNativeBalance(address,uint256)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"setNativeBalance(address,uint256)","shortSignature":"1c050e97","name":"setNativeBalance","inputs":[{"name":"account","kind":"Address","internalType":"address"},{"name":"amount","kind":{"Uint":256},"internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:setUp()","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"setUp()","shortSignature":"0a9254e4","name":"setUp","inputs":[],"outputs":[],"stateMutability":"nonpayable","isSetup":true,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:targetArtifactSelectors()((address,bytes4[])[])","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"targetArtifactSelectors():((address,bytes4[])[])","shortSignature":"66d9a9a0","name":"targetArtifactSelectors","inputs":[],"outputs":[{"name":"targetedArtifactSelectors_","kind":{"Array":{"Tuple":["Address",{"Array":{"FixedBytes":4}}]}},"internalType":"struct StdInvariant.FuzzSelector[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:targetArtifacts()(string[])","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"targetArtifacts():(string[])","shortSignature":"85226c81","name":"targetArtifacts","inputs":[],"outputs":[{"name":"targetedArtifacts_","kind":{"Array":"String"},"internalType":"string[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:targetContracts()(address[])","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"targetContracts():(address[])","shortSignature":"3f7286f4","name":"targetContracts","inputs":[],"outputs":[{"name":"targetedContracts_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:targetSelectors()((address,bytes4[])[])","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"targetSelectors():((address,bytes4[])[])","shortSignature":"916a17c6","name":"targetSelectors","inputs":[],"outputs":[{"name":"targetedSelectors_","kind":{"Array":{"Tuple":["Address",{"Array":{"FixedBytes":4}}]}},"internalType":"struct StdInvariant.FuzzSelector[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:targetSenders()(address[])","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"targetSenders():(address[])","shortSignature":"3e5e3c23","name":"targetSenders","inputs":[],"outputs":[{"name":"targetedSenders_","kind":{"Array":"Address"},"internalType":"address[]"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false},{"id":"test/pnm/BondController.t.sol:BondControllerTest:vmEx()(address)","contractId":"test/pnm/BondController.t.sol:BondControllerTest","signature":"vmEx():(address)","shortSignature":"905a71a9","name":"vmEx","inputs":[],"outputs":[{"name":"","kind":"Address","internalType":"contract VmEx"}],"stateMutability":"view","isSetup":false,"isAction":false,"isTest":false,"isInvariant":false,"isProperty":false}],"functionalLines":[10,21,22,24,28,29,34,35]}]}